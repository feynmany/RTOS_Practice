
FreeRTOS_001Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005670  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005800  08005800  00006800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005938  08005938  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005938  08005938  00006938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005940  08005940  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005940  08005940  00006940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005944  08005944  00006944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005948  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          0001455c  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200145c8  200145c8  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001197e  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bd0  00000000  00000000  00018a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  0001b5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8c  00000000  00000000  0001c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f7e  00000000  00000000  0001d52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013c98  00000000  00000000  000414aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8748  00000000  00000000  00055142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d88a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f80  00000000  00000000  0012d8d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  00132850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057e8 	.word	0x080057e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080057e8 	.word	0x080057e8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ea4 	.word	0x20012ea4

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b988 	b.w	800058c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	468e      	mov	lr, r1
 800029c:	4604      	mov	r4, r0
 800029e:	4688      	mov	r8, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d962      	bls.n	8000370 <__udivmoddi4+0xdc>
 80002aa:	fab2 f682 	clz	r6, r2
 80002ae:	b14e      	cbz	r6, 80002c4 <__udivmoddi4+0x30>
 80002b0:	f1c6 0320 	rsb	r3, r6, #32
 80002b4:	fa01 f806 	lsl.w	r8, r1, r6
 80002b8:	fa20 f303 	lsr.w	r3, r0, r3
 80002bc:	40b7      	lsls	r7, r6
 80002be:	ea43 0808 	orr.w	r8, r3, r8
 80002c2:	40b4      	lsls	r4, r6
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f fc87 	uxth.w	ip, r7
 80002cc:	fbb8 f1fe 	udiv	r1, r8, lr
 80002d0:	0c23      	lsrs	r3, r4, #16
 80002d2:	fb0e 8811 	mls	r8, lr, r1, r8
 80002d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002da:	fb01 f20c 	mul.w	r2, r1, ip
 80002de:	429a      	cmp	r2, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002e8:	f080 80ea 	bcs.w	80004c0 <__udivmoddi4+0x22c>
 80002ec:	429a      	cmp	r2, r3
 80002ee:	f240 80e7 	bls.w	80004c0 <__udivmoddi4+0x22c>
 80002f2:	3902      	subs	r1, #2
 80002f4:	443b      	add	r3, r7
 80002f6:	1a9a      	subs	r2, r3, r2
 80002f8:	b2a3      	uxth	r3, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb00 fc0c 	mul.w	ip, r0, ip
 800030a:	459c      	cmp	ip, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x8e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f100 32ff 	add.w	r2, r0, #4294967295
 8000314:	f080 80d6 	bcs.w	80004c4 <__udivmoddi4+0x230>
 8000318:	459c      	cmp	ip, r3
 800031a:	f240 80d3 	bls.w	80004c4 <__udivmoddi4+0x230>
 800031e:	443b      	add	r3, r7
 8000320:	3802      	subs	r0, #2
 8000322:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000326:	eba3 030c 	sub.w	r3, r3, ip
 800032a:	2100      	movs	r1, #0
 800032c:	b11d      	cbz	r5, 8000336 <__udivmoddi4+0xa2>
 800032e:	40f3      	lsrs	r3, r6
 8000330:	2200      	movs	r2, #0
 8000332:	e9c5 3200 	strd	r3, r2, [r5]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d905      	bls.n	800034a <__udivmoddi4+0xb6>
 800033e:	b10d      	cbz	r5, 8000344 <__udivmoddi4+0xb0>
 8000340:	e9c5 0100 	strd	r0, r1, [r5]
 8000344:	2100      	movs	r1, #0
 8000346:	4608      	mov	r0, r1
 8000348:	e7f5      	b.n	8000336 <__udivmoddi4+0xa2>
 800034a:	fab3 f183 	clz	r1, r3
 800034e:	2900      	cmp	r1, #0
 8000350:	d146      	bne.n	80003e0 <__udivmoddi4+0x14c>
 8000352:	4573      	cmp	r3, lr
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0xc8>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 8105 	bhi.w	8000566 <__udivmoddi4+0x2d2>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000362:	2001      	movs	r0, #1
 8000364:	4690      	mov	r8, r2
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0e5      	beq.n	8000336 <__udivmoddi4+0xa2>
 800036a:	e9c5 4800 	strd	r4, r8, [r5]
 800036e:	e7e2      	b.n	8000336 <__udivmoddi4+0xa2>
 8000370:	2a00      	cmp	r2, #0
 8000372:	f000 8090 	beq.w	8000496 <__udivmoddi4+0x202>
 8000376:	fab2 f682 	clz	r6, r2
 800037a:	2e00      	cmp	r6, #0
 800037c:	f040 80a4 	bne.w	80004c8 <__udivmoddi4+0x234>
 8000380:	1a8a      	subs	r2, r1, r2
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	b280      	uxth	r0, r0
 800038a:	b2bc      	uxth	r4, r7
 800038c:	2101      	movs	r1, #1
 800038e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000392:	fb0e 221c 	mls	r2, lr, ip, r2
 8000396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800039a:	fb04 f20c 	mul.w	r2, r4, ip
 800039e:	429a      	cmp	r2, r3
 80003a0:	d907      	bls.n	80003b2 <__udivmoddi4+0x11e>
 80003a2:	18fb      	adds	r3, r7, r3
 80003a4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x11c>
 80003aa:	429a      	cmp	r2, r3
 80003ac:	f200 80e0 	bhi.w	8000570 <__udivmoddi4+0x2dc>
 80003b0:	46c4      	mov	ip, r8
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003b8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003bc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003c0:	fb02 f404 	mul.w	r4, r2, r4
 80003c4:	429c      	cmp	r4, r3
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x144>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x142>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f200 80ca 	bhi.w	800056a <__udivmoddi4+0x2d6>
 80003d6:	4602      	mov	r2, r0
 80003d8:	1b1b      	subs	r3, r3, r4
 80003da:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003de:	e7a5      	b.n	800032c <__udivmoddi4+0x98>
 80003e0:	f1c1 0620 	rsb	r6, r1, #32
 80003e4:	408b      	lsls	r3, r1
 80003e6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ea:	431f      	orrs	r7, r3
 80003ec:	fa0e f401 	lsl.w	r4, lr, r1
 80003f0:	fa20 f306 	lsr.w	r3, r0, r6
 80003f4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003f8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003fc:	4323      	orrs	r3, r4
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	fa1f fc87 	uxth.w	ip, r7
 8000406:	fbbe f0f9 	udiv	r0, lr, r9
 800040a:	0c1c      	lsrs	r4, r3, #16
 800040c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000410:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000414:	fb00 fe0c 	mul.w	lr, r0, ip
 8000418:	45a6      	cmp	lr, r4
 800041a:	fa02 f201 	lsl.w	r2, r2, r1
 800041e:	d909      	bls.n	8000434 <__udivmoddi4+0x1a0>
 8000420:	193c      	adds	r4, r7, r4
 8000422:	f100 3aff 	add.w	sl, r0, #4294967295
 8000426:	f080 809c 	bcs.w	8000562 <__udivmoddi4+0x2ce>
 800042a:	45a6      	cmp	lr, r4
 800042c:	f240 8099 	bls.w	8000562 <__udivmoddi4+0x2ce>
 8000430:	3802      	subs	r0, #2
 8000432:	443c      	add	r4, r7
 8000434:	eba4 040e 	sub.w	r4, r4, lr
 8000438:	fa1f fe83 	uxth.w	lr, r3
 800043c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000440:	fb09 4413 	mls	r4, r9, r3, r4
 8000444:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000448:	fb03 fc0c 	mul.w	ip, r3, ip
 800044c:	45a4      	cmp	ip, r4
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1ce>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f103 3eff 	add.w	lr, r3, #4294967295
 8000456:	f080 8082 	bcs.w	800055e <__udivmoddi4+0x2ca>
 800045a:	45a4      	cmp	ip, r4
 800045c:	d97f      	bls.n	800055e <__udivmoddi4+0x2ca>
 800045e:	3b02      	subs	r3, #2
 8000460:	443c      	add	r4, r7
 8000462:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000466:	eba4 040c 	sub.w	r4, r4, ip
 800046a:	fba0 ec02 	umull	lr, ip, r0, r2
 800046e:	4564      	cmp	r4, ip
 8000470:	4673      	mov	r3, lr
 8000472:	46e1      	mov	r9, ip
 8000474:	d362      	bcc.n	800053c <__udivmoddi4+0x2a8>
 8000476:	d05f      	beq.n	8000538 <__udivmoddi4+0x2a4>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x1fe>
 800047a:	ebb8 0203 	subs.w	r2, r8, r3
 800047e:	eb64 0409 	sbc.w	r4, r4, r9
 8000482:	fa04 f606 	lsl.w	r6, r4, r6
 8000486:	fa22 f301 	lsr.w	r3, r2, r1
 800048a:	431e      	orrs	r6, r3
 800048c:	40cc      	lsrs	r4, r1
 800048e:	e9c5 6400 	strd	r6, r4, [r5]
 8000492:	2100      	movs	r1, #0
 8000494:	e74f      	b.n	8000336 <__udivmoddi4+0xa2>
 8000496:	fbb1 fcf2 	udiv	ip, r1, r2
 800049a:	0c01      	lsrs	r1, r0, #16
 800049c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004a0:	b280      	uxth	r0, r0
 80004a2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004a6:	463b      	mov	r3, r7
 80004a8:	4638      	mov	r0, r7
 80004aa:	463c      	mov	r4, r7
 80004ac:	46b8      	mov	r8, r7
 80004ae:	46be      	mov	lr, r7
 80004b0:	2620      	movs	r6, #32
 80004b2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004b6:	eba2 0208 	sub.w	r2, r2, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e766      	b.n	800038e <__udivmoddi4+0xfa>
 80004c0:	4601      	mov	r1, r0
 80004c2:	e718      	b.n	80002f6 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e72c      	b.n	8000322 <__udivmoddi4+0x8e>
 80004c8:	f1c6 0220 	rsb	r2, r6, #32
 80004cc:	fa2e f302 	lsr.w	r3, lr, r2
 80004d0:	40b7      	lsls	r7, r6
 80004d2:	40b1      	lsls	r1, r6
 80004d4:	fa20 f202 	lsr.w	r2, r0, r2
 80004d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004dc:	430a      	orrs	r2, r1
 80004de:	fbb3 f8fe 	udiv	r8, r3, lr
 80004e2:	b2bc      	uxth	r4, r7
 80004e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80004e8:	0c11      	lsrs	r1, r2, #16
 80004ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ee:	fb08 f904 	mul.w	r9, r8, r4
 80004f2:	40b0      	lsls	r0, r6
 80004f4:	4589      	cmp	r9, r1
 80004f6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004fa:	b280      	uxth	r0, r0
 80004fc:	d93e      	bls.n	800057c <__udivmoddi4+0x2e8>
 80004fe:	1879      	adds	r1, r7, r1
 8000500:	f108 3cff 	add.w	ip, r8, #4294967295
 8000504:	d201      	bcs.n	800050a <__udivmoddi4+0x276>
 8000506:	4589      	cmp	r9, r1
 8000508:	d81f      	bhi.n	800054a <__udivmoddi4+0x2b6>
 800050a:	eba1 0109 	sub.w	r1, r1, r9
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	b292      	uxth	r2, r2
 800051c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000520:	4542      	cmp	r2, r8
 8000522:	d229      	bcs.n	8000578 <__udivmoddi4+0x2e4>
 8000524:	18ba      	adds	r2, r7, r2
 8000526:	f109 31ff 	add.w	r1, r9, #4294967295
 800052a:	d2c4      	bcs.n	80004b6 <__udivmoddi4+0x222>
 800052c:	4542      	cmp	r2, r8
 800052e:	d2c2      	bcs.n	80004b6 <__udivmoddi4+0x222>
 8000530:	f1a9 0102 	sub.w	r1, r9, #2
 8000534:	443a      	add	r2, r7
 8000536:	e7be      	b.n	80004b6 <__udivmoddi4+0x222>
 8000538:	45f0      	cmp	r8, lr
 800053a:	d29d      	bcs.n	8000478 <__udivmoddi4+0x1e4>
 800053c:	ebbe 0302 	subs.w	r3, lr, r2
 8000540:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000544:	3801      	subs	r0, #1
 8000546:	46e1      	mov	r9, ip
 8000548:	e796      	b.n	8000478 <__udivmoddi4+0x1e4>
 800054a:	eba7 0909 	sub.w	r9, r7, r9
 800054e:	4449      	add	r1, r9
 8000550:	f1a8 0c02 	sub.w	ip, r8, #2
 8000554:	fbb1 f9fe 	udiv	r9, r1, lr
 8000558:	fb09 f804 	mul.w	r8, r9, r4
 800055c:	e7db      	b.n	8000516 <__udivmoddi4+0x282>
 800055e:	4673      	mov	r3, lr
 8000560:	e77f      	b.n	8000462 <__udivmoddi4+0x1ce>
 8000562:	4650      	mov	r0, sl
 8000564:	e766      	b.n	8000434 <__udivmoddi4+0x1a0>
 8000566:	4608      	mov	r0, r1
 8000568:	e6fd      	b.n	8000366 <__udivmoddi4+0xd2>
 800056a:	443b      	add	r3, r7
 800056c:	3a02      	subs	r2, #2
 800056e:	e733      	b.n	80003d8 <__udivmoddi4+0x144>
 8000570:	f1ac 0c02 	sub.w	ip, ip, #2
 8000574:	443b      	add	r3, r7
 8000576:	e71c      	b.n	80003b2 <__udivmoddi4+0x11e>
 8000578:	4649      	mov	r1, r9
 800057a:	e79c      	b.n	80004b6 <__udivmoddi4+0x222>
 800057c:	eba1 0109 	sub.w	r1, r1, r9
 8000580:	46c4      	mov	ip, r8
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	e7c4      	b.n	8000516 <__udivmoddi4+0x282>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fb9d 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f853 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f8bb 	bl	8000718 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT
  DWT_CTRL |= (1<<0);
 80005a2:	4b21      	ldr	r3, [pc, #132]	@ (8000628 <main+0x98>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a20      	ldr	r2, [pc, #128]	@ (8000628 <main+0x98>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6013      	str	r3, [r2, #0]

  // SysView configure and start
  SEGGER_SYSVIEW_Conf();
 80005ae:	f002 ff87 	bl	80034c0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005b2:	f003 feeb 	bl	800438c <SEGGER_SYSVIEW_Start>

  // Application
  taskCreateStatus = xTaskCreate(task1_handler, "Task1", 200, "Hello world from task 1", 2, &task1_handle);
 80005b6:	f107 0308 	add.w	r3, r7, #8
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2302      	movs	r3, #2
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	4b1a      	ldr	r3, [pc, #104]	@ (800062c <main+0x9c>)
 80005c2:	22c8      	movs	r2, #200	@ 0xc8
 80005c4:	491a      	ldr	r1, [pc, #104]	@ (8000630 <main+0xa0>)
 80005c6:	481b      	ldr	r0, [pc, #108]	@ (8000634 <main+0xa4>)
 80005c8:	f001 fe2b 	bl	8002222 <xTaskCreate>
 80005cc:	6178      	str	r0, [r7, #20]
  configASSERT(taskCreateStatus == pdPASS );
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d00b      	beq.n	80005ec <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d8:	f383 8811 	msr	BASEPRI, r3
 80005dc:	f3bf 8f6f 	isb	sy
 80005e0:	f3bf 8f4f 	dsb	sy
 80005e4:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <main+0x58>

  taskCreateStatus = xTaskCreate(task2_handler, "Task2", 200, "Hello world from task 2", 2, &task2_handle);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2302      	movs	r3, #2
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	4b10      	ldr	r3, [pc, #64]	@ (8000638 <main+0xa8>)
 80005f6:	22c8      	movs	r2, #200	@ 0xc8
 80005f8:	4910      	ldr	r1, [pc, #64]	@ (800063c <main+0xac>)
 80005fa:	4811      	ldr	r0, [pc, #68]	@ (8000640 <main+0xb0>)
 80005fc:	f001 fe11 	bl	8002222 <xTaskCreate>
 8000600:	6178      	str	r0, [r7, #20]
  configASSERT(taskCreateStatus == pdPASS );
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d00b      	beq.n	8000620 <main+0x90>
        __asm volatile
 8000608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800060c:	f383 8811 	msr	BASEPRI, r3
 8000610:	f3bf 8f6f 	isb	sy
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	60fb      	str	r3, [r7, #12]
    }
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <main+0x8c>

  //Schedule
  vTaskStartScheduler();
 8000620:	f001 ff64 	bl	80024ec <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <main+0x94>
 8000628:	e0001000 	.word	0xe0001000
 800062c:	08005800 	.word	0x08005800
 8000630:	08005818 	.word	0x08005818
 8000634:	080009d5 	.word	0x080009d5
 8000638:	08005820 	.word	0x08005820
 800063c:	08005838 	.word	0x08005838
 8000640:	080009e5 	.word	0x080009e5

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	@ 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fe10 	bl	8005278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	@ (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	@ (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	@ (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	@ (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006b8:	2332      	movs	r3, #50	@ 0x32
 80006ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006bc:	2304      	movs	r3, #4
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fddd 	bl	8001288 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f9a0 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f83e 	bl	8001778 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 f989 	bl	8000a18 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	@ 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	@ 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4ba2      	ldr	r3, [pc, #648]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4aa1      	ldr	r2, [pc, #644]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b9f      	ldr	r3, [pc, #636]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b9b      	ldr	r3, [pc, #620]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a9a      	ldr	r2, [pc, #616]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b98      	ldr	r3, [pc, #608]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b94      	ldr	r3, [pc, #592]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a93      	ldr	r2, [pc, #588]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b91      	ldr	r3, [pc, #580]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b8d      	ldr	r3, [pc, #564]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a8c      	ldr	r2, [pc, #560]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b8a      	ldr	r3, [pc, #552]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b86      	ldr	r3, [pc, #536]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a85      	ldr	r2, [pc, #532]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b83      	ldr	r3, [pc, #524]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b7f      	ldr	r3, [pc, #508]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a7e      	ldr	r2, [pc, #504]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b7c      	ldr	r3, [pc, #496]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	4879      	ldr	r0, [pc, #484]	@ (80009c0 <MX_GPIO_Init+0x2a8>)
 80007dc:	f000 fd3a 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	4877      	ldr	r0, [pc, #476]	@ (80009c4 <MX_GPIO_Init+0x2ac>)
 80007e6:	f000 fd35 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ea:	2200      	movs	r2, #0
 80007ec:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007f0:	4875      	ldr	r0, [pc, #468]	@ (80009c8 <MX_GPIO_Init+0x2b0>)
 80007f2:	f000 fd2f 	bl	8001254 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	486c      	ldr	r0, [pc, #432]	@ (80009c0 <MX_GPIO_Init+0x2a8>)
 800080e:	f000 fb85 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4866      	ldr	r0, [pc, #408]	@ (80009c4 <MX_GPIO_Init+0x2ac>)
 800082a:	f000 fb77 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	485e      	ldr	r0, [pc, #376]	@ (80009c4 <MX_GPIO_Init+0x2ac>)
 800084a:	f000 fb67 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000852:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	485a      	ldr	r0, [pc, #360]	@ (80009cc <MX_GPIO_Init+0x2b4>)
 8000864:	f000 fb5a 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000868:	2310      	movs	r3, #16
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000878:	2306      	movs	r3, #6
 800087a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4852      	ldr	r0, [pc, #328]	@ (80009cc <MX_GPIO_Init+0x2b4>)
 8000884:	f000 fb4a 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000888:	23e0      	movs	r3, #224	@ 0xe0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000898:	2305      	movs	r3, #5
 800089a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	484a      	ldr	r0, [pc, #296]	@ (80009cc <MX_GPIO_Init+0x2b4>)
 80008a4:	f000 fb3a 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a8:	2304      	movs	r3, #4
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4845      	ldr	r0, [pc, #276]	@ (80009d0 <MX_GPIO_Init+0x2b8>)
 80008bc:	f000 fb2e 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	483c      	ldr	r0, [pc, #240]	@ (80009d0 <MX_GPIO_Init+0x2b8>)
 80008de:	f000 fb1d 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4833      	ldr	r0, [pc, #204]	@ (80009c8 <MX_GPIO_Init+0x2b0>)
 80008fc:	f000 fb0e 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000900:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000912:	2306      	movs	r3, #6
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4829      	ldr	r0, [pc, #164]	@ (80009c4 <MX_GPIO_Init+0x2ac>)
 800091e:	f000 fafd 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000922:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4825      	ldr	r0, [pc, #148]	@ (80009cc <MX_GPIO_Init+0x2b4>)
 8000938:	f000 faf0 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800093c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800094e:	230a      	movs	r3, #10
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	481c      	ldr	r0, [pc, #112]	@ (80009cc <MX_GPIO_Init+0x2b4>)
 800095a:	f000 fadf 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800095e:	2320      	movs	r3, #32
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4815      	ldr	r0, [pc, #84]	@ (80009c8 <MX_GPIO_Init+0x2b0>)
 8000972:	f000 fad3 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000976:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097c:	2312      	movs	r3, #18
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000988:	2304      	movs	r3, #4
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	480f      	ldr	r0, [pc, #60]	@ (80009d0 <MX_GPIO_Init+0x2b8>)
 8000994:	f000 fac2 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	@ (80009c0 <MX_GPIO_Init+0x2a8>)
 80009ae:	f000 fab5 	bl	8000f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	@ 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400

080009d4 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*)parameters);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f004 fb5b 	bl	8005098 <puts>
 80009e2:	e7fb      	b.n	80009dc <task1_handler+0x8>

080009e4 <task2_handler>:
		//taskYIELD();
	}
}
static void task2_handler(void* parameters)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*)parameters);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f004 fb53 	bl	8005098 <puts>
 80009f2:	e7fb      	b.n	80009ec <task2_handler+0x8>

080009f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d101      	bne.n	8000a0a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a06:	f000 f987 	bl	8000d18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40001000 	.word	0x40001000

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <Error_Handler+0x8>

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	4a0f      	ldr	r2, [pc, #60]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	4a08      	ldr	r2, [pc, #32]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000a62:	f002 f96b 	bl	8002d3c <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	@ 0x38
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	4b33      	ldr	r3, [pc, #204]	@ (8000b58 <HAL_InitTick+0xe4>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	4a32      	ldr	r2, [pc, #200]	@ (8000b58 <HAL_InitTick+0xe4>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a94:	4b30      	ldr	r3, [pc, #192]	@ (8000b58 <HAL_InitTick+0xe4>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a98:	f003 0310 	and.w	r3, r3, #16
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa0:	f107 0210 	add.w	r2, r7, #16
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 f870 	bl	8001b90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d103      	bne.n	8000ac2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aba:	f001 f855 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8000abe:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ac0:	e004      	b.n	8000acc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ac2:	f001 f851 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ace:	4a23      	ldr	r2, [pc, #140]	@ (8000b5c <HAL_InitTick+0xe8>)
 8000ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad4:	0c9b      	lsrs	r3, r3, #18
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ada:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <HAL_InitTick+0xec>)
 8000adc:	4a21      	ldr	r2, [pc, #132]	@ (8000b64 <HAL_InitTick+0xf0>)
 8000ade:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <HAL_InitTick+0xec>)
 8000ae2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ae6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b60 <HAL_InitTick+0xec>)
 8000aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <HAL_InitTick+0xec>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <HAL_InitTick+0xec>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <HAL_InitTick+0xec>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b00:	4817      	ldr	r0, [pc, #92]	@ (8000b60 <HAL_InitTick+0xec>)
 8000b02:	f001 f877 	bl	8001bf4 <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d11b      	bne.n	8000b4c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b14:	4812      	ldr	r0, [pc, #72]	@ (8000b60 <HAL_InitTick+0xec>)
 8000b16:	f001 f8c7 	bl	8001ca8 <HAL_TIM_Base_Start_IT>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d111      	bne.n	8000b4c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b28:	2036      	movs	r0, #54	@ 0x36
 8000b2a:	f000 f9e9 	bl	8000f00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d808      	bhi.n	8000b46 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	2036      	movs	r0, #54	@ 0x36
 8000b3a:	f000 f9c5 	bl	8000ec8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <HAL_InitTick+0xf4>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	e002      	b.n	8000b4c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3738      	adds	r7, #56	@ 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	431bde83 	.word	0x431bde83
 8000b60:	20000088 	.word	0x20000088
 8000b64:	40001000 	.word	0x40001000
 8000b68:	20000004 	.word	0x20000004

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <NMI_Handler+0x4>

08000b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <MemManage_Handler+0x4>

08000b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ba8:	4802      	ldr	r0, [pc, #8]	@ (8000bb4 <TIM6_DAC_IRQHandler+0x10>)
 8000baa:	f001 f8ed 	bl	8001d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000088 	.word	0x20000088

08000bb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	e00a      	b.n	8000be0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bca:	f3af 8000 	nop.w
 8000bce:	4601      	mov	r1, r0
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	60ba      	str	r2, [r7, #8]
 8000bd6:	b2ca      	uxtb	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbf0      	blt.n	8000bca <_read+0x12>
  }

  return len;
 8000be8:	687b      	ldr	r3, [r7, #4]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_isatty>:

int _isatty(int file)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c84:	f7ff ffea 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c8a:	490d      	ldr	r1, [pc, #52]	@ (8000cc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ccc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cae:	f004 fb1f 	bl	80052f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fc6d 	bl	8000590 <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cc4:	08005948 	.word	0x08005948
  ldr r2, =_sbss
 8000cc8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ccc:	200145c8 	.word	0x200145c8

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	@ (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f8d8 	bl	8000eb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff feb6 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fe8c 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	200000d0 	.word	0x200000d0

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	200000d0 	.word	0x200000d0

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	@ (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	@ (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	@ (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	@ 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	@ 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff4c 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eda:	f7ff ff61 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000ede:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	6978      	ldr	r0, [r7, #20]
 8000ee6:	f7ff ffb1 	bl	8000e4c <NVIC_EncodePriority>
 8000eea:	4602      	mov	r2, r0
 8000eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff80 	bl	8000df8 <__NVIC_SetPriority>
}
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff54 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	@ 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e16b      	b.n	8001210 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 815a 	bne.w	800120a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d005      	beq.n	8000f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d130      	bne.n	8000fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	f003 0201 	and.w	r2, r3, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d017      	beq.n	800100c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d123      	bne.n	8001060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	69b9      	ldr	r1, [r7, #24]
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0203 	and.w	r2, r3, #3
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80b4 	beq.w	800120a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b60      	ldr	r3, [pc, #384]	@ (8001228 <HAL_GPIO_Init+0x30c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	4a5f      	ldr	r2, [pc, #380]	@ (8001228 <HAL_GPIO_Init+0x30c>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001228 <HAL_GPIO_Init+0x30c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010be:	4a5b      	ldr	r2, [pc, #364]	@ (800122c <HAL_GPIO_Init+0x310>)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a52      	ldr	r2, [pc, #328]	@ (8001230 <HAL_GPIO_Init+0x314>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d02b      	beq.n	8001142 <HAL_GPIO_Init+0x226>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a51      	ldr	r2, [pc, #324]	@ (8001234 <HAL_GPIO_Init+0x318>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d025      	beq.n	800113e <HAL_GPIO_Init+0x222>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a50      	ldr	r2, [pc, #320]	@ (8001238 <HAL_GPIO_Init+0x31c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d01f      	beq.n	800113a <HAL_GPIO_Init+0x21e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4f      	ldr	r2, [pc, #316]	@ (800123c <HAL_GPIO_Init+0x320>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d019      	beq.n	8001136 <HAL_GPIO_Init+0x21a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4e      	ldr	r2, [pc, #312]	@ (8001240 <HAL_GPIO_Init+0x324>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x216>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4d      	ldr	r2, [pc, #308]	@ (8001244 <HAL_GPIO_Init+0x328>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x212>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4c      	ldr	r2, [pc, #304]	@ (8001248 <HAL_GPIO_Init+0x32c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x20e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4b      	ldr	r2, [pc, #300]	@ (800124c <HAL_GPIO_Init+0x330>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x20a>
 8001122:	2307      	movs	r3, #7
 8001124:	e00e      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001126:	2308      	movs	r3, #8
 8001128:	e00c      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800112a:	2306      	movs	r3, #6
 800112c:	e00a      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800112e:	2305      	movs	r3, #5
 8001130:	e008      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001132:	2304      	movs	r3, #4
 8001134:	e006      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001136:	2303      	movs	r3, #3
 8001138:	e004      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800113a:	2302      	movs	r3, #2
 800113c:	e002      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001142:	2300      	movs	r3, #0
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	f002 0203 	and.w	r2, r2, #3
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	4093      	lsls	r3, r2
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001154:	4935      	ldr	r1, [pc, #212]	@ (800122c <HAL_GPIO_Init+0x310>)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	3302      	adds	r3, #2
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001162:	4b3b      	ldr	r3, [pc, #236]	@ (8001250 <HAL_GPIO_Init+0x334>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001186:	4a32      	ldr	r2, [pc, #200]	@ (8001250 <HAL_GPIO_Init+0x334>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800118c:	4b30      	ldr	r3, [pc, #192]	@ (8001250 <HAL_GPIO_Init+0x334>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b0:	4a27      	ldr	r2, [pc, #156]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011b6:	4b26      	ldr	r3, [pc, #152]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011da:	4a1d      	ldr	r2, [pc, #116]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001204:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <HAL_GPIO_Init+0x334>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3301      	adds	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	2b0f      	cmp	r3, #15
 8001214:	f67f ae90 	bls.w	8000f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3724      	adds	r7, #36	@ 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40013800 	.word	0x40013800
 8001230:	40020000 	.word	0x40020000
 8001234:	40020400 	.word	0x40020400
 8001238:	40020800 	.word	0x40020800
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40021000 	.word	0x40021000
 8001244:	40021400 	.word	0x40021400
 8001248:	40021800 	.word	0x40021800
 800124c:	40021c00 	.word	0x40021c00
 8001250:	40013c00 	.word	0x40013c00

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e267      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d075      	beq.n	8001392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012a6:	4b88      	ldr	r3, [pc, #544]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d00c      	beq.n	80012cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b2:	4b85      	ldr	r3, [pc, #532]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d112      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012be:	4b82      	ldr	r3, [pc, #520]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012ca:	d10b      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	4b7e      	ldr	r3, [pc, #504]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d05b      	beq.n	8001390 <HAL_RCC_OscConfig+0x108>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d157      	bne.n	8001390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e242      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ec:	d106      	bne.n	80012fc <HAL_RCC_OscConfig+0x74>
 80012ee:	4b76      	ldr	r3, [pc, #472]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a75      	ldr	r2, [pc, #468]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e01d      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x98>
 8001306:	4b70      	ldr	r3, [pc, #448]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a6f      	ldr	r2, [pc, #444]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800130c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b6d      	ldr	r3, [pc, #436]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6c      	ldr	r2, [pc, #432]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e00b      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 8001320:	4b69      	ldr	r3, [pc, #420]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a68      	ldr	r2, [pc, #416]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b66      	ldr	r3, [pc, #408]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a65      	ldr	r2, [pc, #404]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fcfe 	bl	8000d40 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fcfa 	bl	8000d40 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	@ 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e207      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b5b      	ldr	r3, [pc, #364]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0xc0>
 8001366:	e014      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fcea 	bl	8000d40 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fce6 	bl	8000d40 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	@ 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1f3      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001382:	4b51      	ldr	r3, [pc, #324]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0xe8>
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d063      	beq.n	8001466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800139e:	4b4a      	ldr	r3, [pc, #296]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013aa:	4b47      	ldr	r3, [pc, #284]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d11c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b6:	4b44      	ldr	r3, [pc, #272]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d116      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	4b41      	ldr	r3, [pc, #260]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d001      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e1c7      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	4b3b      	ldr	r3, [pc, #236]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4937      	ldr	r1, [pc, #220]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	e03a      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f8:	4b34      	ldr	r3, [pc, #208]	@ (80014cc <HAL_RCC_OscConfig+0x244>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff fc9f 	bl	8000d40 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff fc9b 	bl	8000d40 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e1a8      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001418:	4b2b      	ldr	r3, [pc, #172]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001424:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4925      	ldr	r1, [pc, #148]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
 8001438:	e015      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143a:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <HAL_RCC_OscConfig+0x244>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fc7e 	bl	8000d40 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff fc7a 	bl	8000d40 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e187      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d036      	beq.n	80014e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d016      	beq.n	80014a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_RCC_OscConfig+0x248>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001480:	f7ff fc5e 	bl	8000d40 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001488:	f7ff fc5a 	bl	8000d40 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e167      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149a:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800149c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x200>
 80014a6:	e01b      	b.n	80014e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a8:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <HAL_RCC_OscConfig+0x248>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fc47 	bl	8000d40 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	e00e      	b.n	80014d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b6:	f7ff fc43 	bl	8000d40 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d907      	bls.n	80014d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e150      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
 80014c8:	40023800 	.word	0x40023800
 80014cc:	42470000 	.word	0x42470000
 80014d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	4b88      	ldr	r3, [pc, #544]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80014d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1ea      	bne.n	80014b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8097 	beq.w	800161c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f2:	4b81      	ldr	r3, [pc, #516]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10f      	bne.n	800151e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b7d      	ldr	r3, [pc, #500]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	4a7c      	ldr	r2, [pc, #496]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	@ 0x40
 800150e:	4b7a      	ldr	r3, [pc, #488]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b77      	ldr	r3, [pc, #476]	@ (80016fc <HAL_RCC_OscConfig+0x474>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152a:	4b74      	ldr	r3, [pc, #464]	@ (80016fc <HAL_RCC_OscConfig+0x474>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a73      	ldr	r2, [pc, #460]	@ (80016fc <HAL_RCC_OscConfig+0x474>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001536:	f7ff fc03 	bl	8000d40 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153e:	f7ff fbff 	bl	8000d40 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e10c      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	4b6a      	ldr	r3, [pc, #424]	@ (80016fc <HAL_RCC_OscConfig+0x474>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x2ea>
 8001564:	4b64      	ldr	r3, [pc, #400]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001568:	4a63      	ldr	r2, [pc, #396]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001570:	e01c      	b.n	80015ac <HAL_RCC_OscConfig+0x324>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b05      	cmp	r3, #5
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x30c>
 800157a:	4b5f      	ldr	r3, [pc, #380]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157e:	4a5e      	ldr	r2, [pc, #376]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6713      	str	r3, [r2, #112]	@ 0x70
 8001586:	4b5c      	ldr	r3, [pc, #368]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158a:	4a5b      	ldr	r2, [pc, #364]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6713      	str	r3, [r2, #112]	@ 0x70
 8001592:	e00b      	b.n	80015ac <HAL_RCC_OscConfig+0x324>
 8001594:	4b58      	ldr	r3, [pc, #352]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001598:	4a57      	ldr	r2, [pc, #348]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a0:	4b55      	ldr	r3, [pc, #340]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a4:	4a54      	ldr	r2, [pc, #336]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015a6:	f023 0304 	bic.w	r3, r3, #4
 80015aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d015      	beq.n	80015e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff fbc4 	bl	8000d40 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	e00a      	b.n	80015d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015bc:	f7ff fbc0 	bl	8000d40 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0cb      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d2:	4b49      	ldr	r3, [pc, #292]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0ee      	beq.n	80015bc <HAL_RCC_OscConfig+0x334>
 80015de:	e014      	b.n	800160a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e0:	f7ff fbae 	bl	8000d40 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff fbaa 	bl	8000d40 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e0b5      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fe:	4b3e      	ldr	r3, [pc, #248]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1ee      	bne.n	80015e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d105      	bne.n	800161c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001610:	4b39      	ldr	r3, [pc, #228]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	4a38      	ldr	r2, [pc, #224]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800161a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80a1 	beq.w	8001768 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001626:	4b34      	ldr	r3, [pc, #208]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b08      	cmp	r3, #8
 8001630:	d05c      	beq.n	80016ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d141      	bne.n	80016be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163a:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <HAL_RCC_OscConfig+0x478>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fb7e 	bl	8000d40 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fb7a 	bl	8000d40 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e087      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69da      	ldr	r2, [r3, #28]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001674:	019b      	lsls	r3, r3, #6
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	3b01      	subs	r3, #1
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001688:	061b      	lsls	r3, r3, #24
 800168a:	491b      	ldr	r1, [pc, #108]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001690:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <HAL_RCC_OscConfig+0x478>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff fb53 	bl	8000d40 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169e:	f7ff fb4f 	bl	8000d40 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e05c      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b0:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x416>
 80016bc:	e054      	b.n	8001768 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_RCC_OscConfig+0x478>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fb3c 	bl	8000d40 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff fb38 	bl	8000d40 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e045      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x444>
 80016ea:	e03d      	b.n	8001768 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e038      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40007000 	.word	0x40007000
 8001700:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <HAL_RCC_OscConfig+0x4ec>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d028      	beq.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d121      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	429a      	cmp	r2, r3
 800172c:	d11a      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001734:	4013      	ands	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800173a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800173c:	4293      	cmp	r3, r2
 800173e:	d111      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174a:	085b      	lsrs	r3, r3, #1
 800174c:	3b01      	subs	r3, #1
 800174e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d107      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0cc      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b68      	ldr	r3, [pc, #416]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d90c      	bls.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b65      	ldr	r3, [pc, #404]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b63      	ldr	r3, [pc, #396]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0b8      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017cc:	4b59      	ldr	r3, [pc, #356]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a58      	ldr	r2, [pc, #352]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e4:	4b53      	ldr	r3, [pc, #332]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a52      	ldr	r2, [pc, #328]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f0:	4b50      	ldr	r3, [pc, #320]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	494d      	ldr	r1, [pc, #308]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d044      	beq.n	8001898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b47      	ldr	r3, [pc, #284]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d119      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e07f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d003      	beq.n	8001836 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001832:	2b03      	cmp	r3, #3
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b3f      	ldr	r3, [pc, #252]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e06f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001846:	4b3b      	ldr	r3, [pc, #236]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e067      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001856:	4b37      	ldr	r3, [pc, #220]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f023 0203 	bic.w	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4934      	ldr	r1, [pc, #208]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	4313      	orrs	r3, r2
 8001866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001868:	f7ff fa6a 	bl	8000d40 <HAL_GetTick>
 800186c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	e00a      	b.n	8001886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	f7ff fa66 	bl	8000d40 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e04f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	4b2b      	ldr	r3, [pc, #172]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 020c 	and.w	r2, r3, #12
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	429a      	cmp	r2, r3
 8001896:	d1eb      	bne.n	8001870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001898:	4b25      	ldr	r3, [pc, #148]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d20c      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e032      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4916      	ldr	r1, [pc, #88]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ea:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	490e      	ldr	r1, [pc, #56]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018fe:	f000 f821 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8001902:	4602      	mov	r2, r0
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	490a      	ldr	r1, [pc, #40]	@ (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	5ccb      	ldrb	r3, [r1, r3]
 8001912:	fa22 f303 	lsr.w	r3, r2, r3
 8001916:	4a09      	ldr	r2, [pc, #36]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f8a8 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00
 8001934:	40023800 	.word	0x40023800
 8001938:	08005908 	.word	0x08005908
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001948:	b094      	sub	sp, #80	@ 0x50
 800194a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800195c:	4b79      	ldr	r3, [pc, #484]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d00d      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x40>
 8001968:	2b08      	cmp	r3, #8
 800196a:	f200 80e1 	bhi.w	8001b30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x34>
 8001972:	2b04      	cmp	r3, #4
 8001974:	d003      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0x3a>
 8001976:	e0db      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001978:	4b73      	ldr	r3, [pc, #460]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x204>)
 800197a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800197c:	e0db      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800197e:	4b73      	ldr	r3, [pc, #460]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x208>)
 8001980:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001982:	e0d8      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001984:	4b6f      	ldr	r3, [pc, #444]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800198c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800198e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d063      	beq.n	8001a62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	099b      	lsrs	r3, r3, #6
 80019a0:	2200      	movs	r2, #0
 80019a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80019ae:	2300      	movs	r3, #0
 80019b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80019b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019b6:	4622      	mov	r2, r4
 80019b8:	462b      	mov	r3, r5
 80019ba:	f04f 0000 	mov.w	r0, #0
 80019be:	f04f 0100 	mov.w	r1, #0
 80019c2:	0159      	lsls	r1, r3, #5
 80019c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c8:	0150      	lsls	r0, r2, #5
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4621      	mov	r1, r4
 80019d0:	1a51      	subs	r1, r2, r1
 80019d2:	6139      	str	r1, [r7, #16]
 80019d4:	4629      	mov	r1, r5
 80019d6:	eb63 0301 	sbc.w	r3, r3, r1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019e8:	4659      	mov	r1, fp
 80019ea:	018b      	lsls	r3, r1, #6
 80019ec:	4651      	mov	r1, sl
 80019ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019f2:	4651      	mov	r1, sl
 80019f4:	018a      	lsls	r2, r1, #6
 80019f6:	4651      	mov	r1, sl
 80019f8:	ebb2 0801 	subs.w	r8, r2, r1
 80019fc:	4659      	mov	r1, fp
 80019fe:	eb63 0901 	sbc.w	r9, r3, r1
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a16:	4690      	mov	r8, r2
 8001a18:	4699      	mov	r9, r3
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	eb18 0303 	adds.w	r3, r8, r3
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	462b      	mov	r3, r5
 8001a24:	eb49 0303 	adc.w	r3, r9, r3
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a36:	4629      	mov	r1, r5
 8001a38:	024b      	lsls	r3, r1, #9
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a40:	4621      	mov	r1, r4
 8001a42:	024a      	lsls	r2, r1, #9
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a54:	f7fe fc06 	bl	8000264 <__aeabi_uldivmod>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a60:	e058      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a62:	4b38      	ldr	r3, [pc, #224]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	099b      	lsrs	r3, r3, #6
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a72:	623b      	str	r3, [r7, #32]
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a7c:	4642      	mov	r2, r8
 8001a7e:	464b      	mov	r3, r9
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	0159      	lsls	r1, r3, #5
 8001a8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a8e:	0150      	lsls	r0, r2, #5
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4641      	mov	r1, r8
 8001a96:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a9a:	4649      	mov	r1, r9
 8001a9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ab0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ab4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ab8:	eb63 050b 	sbc.w	r5, r3, fp
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	00eb      	lsls	r3, r5, #3
 8001ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aca:	00e2      	lsls	r2, r4, #3
 8001acc:	4614      	mov	r4, r2
 8001ace:	461d      	mov	r5, r3
 8001ad0:	4643      	mov	r3, r8
 8001ad2:	18e3      	adds	r3, r4, r3
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	464b      	mov	r3, r9
 8001ad8:	eb45 0303 	adc.w	r3, r5, r3
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aea:	4629      	mov	r1, r5
 8001aec:	028b      	lsls	r3, r1, #10
 8001aee:	4621      	mov	r1, r4
 8001af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af4:	4621      	mov	r1, r4
 8001af6:	028a      	lsls	r2, r1, #10
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001afe:	2200      	movs	r2, #0
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	61fa      	str	r2, [r7, #28]
 8001b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b08:	f7fe fbac 	bl	8000264 <__aeabi_uldivmod>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4613      	mov	r3, r2
 8001b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	0c1b      	lsrs	r3, r3, #16
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b2e:	e002      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3750      	adds	r7, #80	@ 0x50
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	00f42400 	.word	0x00f42400
 8001b4c:	007a1200 	.word	0x007a1200

08001b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b54:	4b03      	ldr	r3, [pc, #12]	@ (8001b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000000 	.word	0x20000000

08001b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b6c:	f7ff fff0 	bl	8001b50 <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	0a9b      	lsrs	r3, r3, #10
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4903      	ldr	r1, [pc, #12]	@ (8001b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	08005918 	.word	0x08005918

08001b90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba0:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bac:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bc4:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	08db      	lsrs	r3, r3, #3
 8001bca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bd2:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <HAL_RCC_GetClockConfig+0x60>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0207 	and.w	r2, r3, #7
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	601a      	str	r2, [r3, #0]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40023c00 	.word	0x40023c00

08001bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e041      	b.n	8001c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f839 	bl	8001c92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3304      	adds	r3, #4
 8001c30:	4619      	mov	r1, r3
 8001c32:	4610      	mov	r0, r2
 8001c34:	f000 f9c0 	bl	8001fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d001      	beq.n	8001cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e04e      	b.n	8001d5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a23      	ldr	r2, [pc, #140]	@ (8001d6c <HAL_TIM_Base_Start_IT+0xc4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d022      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0x80>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cea:	d01d      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0x80>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d70 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d018      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0x80>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8001d74 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d013      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0x80>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a1c      	ldr	r2, [pc, #112]	@ (8001d78 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00e      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0x80>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001d7c <HAL_TIM_Base_Start_IT+0xd4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d009      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0x80>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a19      	ldr	r2, [pc, #100]	@ (8001d80 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d004      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0x80>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a18      	ldr	r2, [pc, #96]	@ (8001d84 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d111      	bne.n	8001d4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d010      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0201 	orr.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4a:	e007      	b.n	8001d5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	40000400 	.word	0x40000400
 8001d74:	40000800 	.word	0x40000800
 8001d78:	40000c00 	.word	0x40000c00
 8001d7c:	40010400 	.word	0x40010400
 8001d80:	40014000 	.word	0x40014000
 8001d84:	40001800 	.word	0x40001800

08001d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d020      	beq.n	8001dec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01b      	beq.n	8001dec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0202 	mvn.w	r2, #2
 8001dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f8d2 	bl	8001f7c <HAL_TIM_IC_CaptureCallback>
 8001dd8:	e005      	b.n	8001de6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f8c4 	bl	8001f68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f8d5 	bl	8001f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d020      	beq.n	8001e38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d01b      	beq.n	8001e38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0204 	mvn.w	r2, #4
 8001e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f8ac 	bl	8001f7c <HAL_TIM_IC_CaptureCallback>
 8001e24:	e005      	b.n	8001e32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f89e 	bl	8001f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f8af 	bl	8001f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d020      	beq.n	8001e84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01b      	beq.n	8001e84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0208 	mvn.w	r2, #8
 8001e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2204      	movs	r2, #4
 8001e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f886 	bl	8001f7c <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f878 	bl	8001f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f889 	bl	8001f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d020      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01b      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0210 	mvn.w	r2, #16
 8001ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f860 	bl	8001f7c <HAL_TIM_IC_CaptureCallback>
 8001ebc:	e005      	b.n	8001eca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f852 	bl	8001f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f863 	bl	8001f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00c      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0201 	mvn.w	r2, #1
 8001eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe fd80 	bl	80009f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00c      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f900 	bl	8002118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f834 	bl	8001fa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0220 	mvn.w	r2, #32
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8d2 	bl	8002104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a43      	ldr	r2, [pc, #268]	@ (80020d8 <TIM_Base_SetConfig+0x120>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d013      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fd6:	d00f      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a40      	ldr	r2, [pc, #256]	@ (80020dc <TIM_Base_SetConfig+0x124>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00b      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3f      	ldr	r2, [pc, #252]	@ (80020e0 <TIM_Base_SetConfig+0x128>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d007      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3e      	ldr	r2, [pc, #248]	@ (80020e4 <TIM_Base_SetConfig+0x12c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d003      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3d      	ldr	r2, [pc, #244]	@ (80020e8 <TIM_Base_SetConfig+0x130>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d108      	bne.n	800200a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a32      	ldr	r2, [pc, #200]	@ (80020d8 <TIM_Base_SetConfig+0x120>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d02b      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002018:	d027      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a2f      	ldr	r2, [pc, #188]	@ (80020dc <TIM_Base_SetConfig+0x124>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d023      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2e      	ldr	r2, [pc, #184]	@ (80020e0 <TIM_Base_SetConfig+0x128>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01f      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a2d      	ldr	r2, [pc, #180]	@ (80020e4 <TIM_Base_SetConfig+0x12c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01b      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a2c      	ldr	r2, [pc, #176]	@ (80020e8 <TIM_Base_SetConfig+0x130>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d017      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a2b      	ldr	r2, [pc, #172]	@ (80020ec <TIM_Base_SetConfig+0x134>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a2a      	ldr	r2, [pc, #168]	@ (80020f0 <TIM_Base_SetConfig+0x138>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00f      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a29      	ldr	r2, [pc, #164]	@ (80020f4 <TIM_Base_SetConfig+0x13c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00b      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a28      	ldr	r2, [pc, #160]	@ (80020f8 <TIM_Base_SetConfig+0x140>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a27      	ldr	r2, [pc, #156]	@ (80020fc <TIM_Base_SetConfig+0x144>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d003      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a26      	ldr	r2, [pc, #152]	@ (8002100 <TIM_Base_SetConfig+0x148>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d108      	bne.n	800207c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a0e      	ldr	r2, [pc, #56]	@ (80020d8 <TIM_Base_SetConfig+0x120>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d003      	beq.n	80020aa <TIM_Base_SetConfig+0xf2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a10      	ldr	r2, [pc, #64]	@ (80020e8 <TIM_Base_SetConfig+0x130>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d103      	bne.n	80020b2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f043 0204 	orr.w	r2, r3, #4
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	601a      	str	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40010000 	.word	0x40010000
 80020dc:	40000400 	.word	0x40000400
 80020e0:	40000800 	.word	0x40000800
 80020e4:	40000c00 	.word	0x40000c00
 80020e8:	40010400 	.word	0x40010400
 80020ec:	40014000 	.word	0x40014000
 80020f0:	40014400 	.word	0x40014400
 80020f4:	40014800 	.word	0x40014800
 80020f8:	40001800 	.word	0x40001800
 80020fc:	40001c00 	.word	0x40001c00
 8002100:	40002000 	.word	0x40002000

08002104 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f103 0208 	add.w	r2, r3, #8
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f103 0208 	add.w	r2, r3, #8
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f103 0208 	add.w	r2, r3, #8
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	601a      	str	r2, [r3, #0]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6892      	ldr	r2, [r2, #8]
 80021e4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6852      	ldr	r2, [r2, #4]
 80021ee:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d103      	bne.n	8002202 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002222:	b580      	push	{r7, lr}
 8002224:	b08c      	sub	sp, #48	@ 0x30
 8002226:	af04      	add	r7, sp, #16
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	4613      	mov	r3, r2
 8002230:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4618      	mov	r0, r3
 8002238:	f000 ff32 	bl	80030a0 <pvPortMalloc>
 800223c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00e      	beq.n	8002262 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002244:	2058      	movs	r0, #88	@ 0x58
 8002246:	f000 ff2b 	bl	80030a0 <pvPortMalloc>
 800224a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	631a      	str	r2, [r3, #48]	@ 0x30
 8002258:	e005      	b.n	8002266 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f001 f802 	bl	8003264 <vPortFree>
 8002260:	e001      	b.n	8002266 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d013      	beq.n	8002294 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800226c:	88fa      	ldrh	r2, [r7, #6]
 800226e:	2300      	movs	r3, #0
 8002270:	9303      	str	r3, [sp, #12]
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	9302      	str	r3, [sp, #8]
 8002276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f80e 	bl	80022a4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002288:	69f8      	ldr	r0, [r7, #28]
 800228a:	f000 f8a3 	bl	80023d4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800228e:	2301      	movs	r3, #1
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	e002      	b.n	800229a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002294:	f04f 33ff 	mov.w	r3, #4294967295
 8002298:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800229a:	69bb      	ldr	r3, [r7, #24]
    }
 800229c:	4618      	mov	r0, r3
 800229e:	3720      	adds	r7, #32
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80022b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	461a      	mov	r2, r3
 80022bc:	21a5      	movs	r1, #165	@ 0xa5
 80022be:	f002 ffdb 	bl	8005278 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022cc:	3b01      	subs	r3, #1
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	f023 0307 	bic.w	r3, r3, #7
 80022da:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <prvInitialiseNewTask+0x5a>
        __asm volatile
 80022e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022ea:	f383 8811 	msr	BASEPRI, r3
 80022ee:	f3bf 8f6f 	isb	sy
 80022f2:	f3bf 8f4f 	dsb	sy
 80022f6:	617b      	str	r3, [r7, #20]
    }
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	e7fd      	b.n	80022fa <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01f      	beq.n	8002344 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	e012      	b.n	8002330 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	4413      	add	r3, r2
 8002310:	7819      	ldrb	r1, [r3, #0]
 8002312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	4413      	add	r3, r2
 8002318:	3334      	adds	r3, #52	@ 0x34
 800231a:	460a      	mov	r2, r1
 800231c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	4413      	add	r3, r2
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3301      	adds	r3, #1
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	2b09      	cmp	r3, #9
 8002334:	d9e9      	bls.n	800230a <prvInitialiseNewTask+0x66>
 8002336:	e000      	b.n	800233a <prvInitialiseNewTask+0x96>
            {
                break;
 8002338:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800233a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002342:	e003      	b.n	800234c <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800234c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234e:	2b04      	cmp	r3, #4
 8002350:	d901      	bls.n	8002356 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002352:	2304      	movs	r3, #4
 8002354:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002358:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800235a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800235c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002360:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002364:	2200      	movs	r2, #0
 8002366:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236a:	3304      	adds	r3, #4
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fefd 	bl	800216c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002374:	3318      	adds	r3, #24
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fef8 	bl	800216c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800237c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800237e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002380:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002384:	f1c3 0205 	rsb	r2, r3, #5
 8002388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800238c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002390:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002394:	3350      	adds	r3, #80	@ 0x50
 8002396:	2204      	movs	r2, #4
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f002 ff6c 	bl	8005278 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80023a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a2:	3354      	adds	r3, #84	@ 0x54
 80023a4:	2201      	movs	r2, #1
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f002 ff65 	bl	8005278 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	68f9      	ldr	r1, [r7, #12]
 80023b2:	69b8      	ldr	r0, [r7, #24]
 80023b4:	f000 fb92 	bl	8002adc <pxPortInitialiseStack>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023bc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80023be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023c8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023ca:	bf00      	nop
 80023cc:	3720      	adds	r7, #32
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80023d4:	b5b0      	push	{r4, r5, r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af02      	add	r7, sp, #8
 80023da:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80023dc:	f000 fd2e 	bl	8002e3c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80023e0:	4b3b      	ldr	r3, [pc, #236]	@ (80024d0 <prvAddNewTaskToReadyList+0xfc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3301      	adds	r3, #1
 80023e6:	4a3a      	ldr	r2, [pc, #232]	@ (80024d0 <prvAddNewTaskToReadyList+0xfc>)
 80023e8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023ea:	4b3a      	ldr	r3, [pc, #232]	@ (80024d4 <prvAddNewTaskToReadyList+0x100>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023f2:	4a38      	ldr	r2, [pc, #224]	@ (80024d4 <prvAddNewTaskToReadyList+0x100>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023f8:	4b35      	ldr	r3, [pc, #212]	@ (80024d0 <prvAddNewTaskToReadyList+0xfc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d110      	bne.n	8002422 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002400:	f000 fad2 	bl	80029a8 <prvInitialiseTaskLists>
 8002404:	e00d      	b.n	8002422 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002406:	4b34      	ldr	r3, [pc, #208]	@ (80024d8 <prvAddNewTaskToReadyList+0x104>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800240e:	4b31      	ldr	r3, [pc, #196]	@ (80024d4 <prvAddNewTaskToReadyList+0x100>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002418:	429a      	cmp	r2, r3
 800241a:	d802      	bhi.n	8002422 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800241c:	4a2d      	ldr	r2, [pc, #180]	@ (80024d4 <prvAddNewTaskToReadyList+0x100>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002422:	4b2e      	ldr	r3, [pc, #184]	@ (80024dc <prvAddNewTaskToReadyList+0x108>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	3301      	adds	r3, #1
 8002428:	4a2c      	ldr	r2, [pc, #176]	@ (80024dc <prvAddNewTaskToReadyList+0x108>)
 800242a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800242c:	4b2b      	ldr	r3, [pc, #172]	@ (80024dc <prvAddNewTaskToReadyList+0x108>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d016      	beq.n	8002468 <prvAddNewTaskToReadyList+0x94>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4618      	mov	r0, r3
 800243e:	f002 fb03 	bl	8004a48 <SEGGER_SYSVIEW_OnTaskCreate>
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	461d      	mov	r5, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	461c      	mov	r4, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	1ae3      	subs	r3, r4, r3
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	462b      	mov	r3, r5
 8002464:	f001 f8ce 	bl	8003604 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4618      	mov	r0, r3
 800246c:	f002 fb70 	bl	8004b50 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	2201      	movs	r2, #1
 8002476:	409a      	lsls	r2, r3
 8002478:	4b19      	ldr	r3, [pc, #100]	@ (80024e0 <prvAddNewTaskToReadyList+0x10c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4313      	orrs	r3, r2
 800247e:	4a18      	ldr	r2, [pc, #96]	@ (80024e0 <prvAddNewTaskToReadyList+0x10c>)
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4a15      	ldr	r2, [pc, #84]	@ (80024e4 <prvAddNewTaskToReadyList+0x110>)
 8002490:	441a      	add	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3304      	adds	r3, #4
 8002496:	4619      	mov	r1, r3
 8002498:	4610      	mov	r0, r2
 800249a:	f7ff fe74 	bl	8002186 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800249e:	f000 fcff 	bl	8002ea0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80024a2:	4b0d      	ldr	r3, [pc, #52]	@ (80024d8 <prvAddNewTaskToReadyList+0x104>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00e      	beq.n	80024c8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024aa:	4b0a      	ldr	r3, [pc, #40]	@ (80024d4 <prvAddNewTaskToReadyList+0x100>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d207      	bcs.n	80024c8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80024b8:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <prvAddNewTaskToReadyList+0x114>)
 80024ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bdb0      	pop	{r4, r5, r7, pc}
 80024d0:	200001ac 	.word	0x200001ac
 80024d4:	200000d4 	.word	0x200000d4
 80024d8:	200001b8 	.word	0x200001b8
 80024dc:	200001c8 	.word	0x200001c8
 80024e0:	200001b4 	.word	0x200001b4
 80024e4:	200000d8 	.word	0x200000d8
 80024e8:	e000ed04 	.word	0xe000ed04

080024ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80024f2:	4b24      	ldr	r3, [pc, #144]	@ (8002584 <vTaskStartScheduler+0x98>)
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	2300      	movs	r3, #0
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2300      	movs	r3, #0
 80024fc:	2282      	movs	r2, #130	@ 0x82
 80024fe:	4922      	ldr	r1, [pc, #136]	@ (8002588 <vTaskStartScheduler+0x9c>)
 8002500:	4822      	ldr	r0, [pc, #136]	@ (800258c <vTaskStartScheduler+0xa0>)
 8002502:	f7ff fe8e 	bl	8002222 <xTaskCreate>
 8002506:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d124      	bne.n	8002558 <vTaskStartScheduler+0x6c>
        __asm volatile
 800250e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002512:	f383 8811 	msr	BASEPRI, r3
 8002516:	f3bf 8f6f 	isb	sy
 800251a:	f3bf 8f4f 	dsb	sy
 800251e:	60bb      	str	r3, [r7, #8]
    }
 8002520:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002522:	4b1b      	ldr	r3, [pc, #108]	@ (8002590 <vTaskStartScheduler+0xa4>)
 8002524:	f04f 32ff 	mov.w	r2, #4294967295
 8002528:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800252a:	4b1a      	ldr	r3, [pc, #104]	@ (8002594 <vTaskStartScheduler+0xa8>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002530:	4b19      	ldr	r3, [pc, #100]	@ (8002598 <vTaskStartScheduler+0xac>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002536:	4b19      	ldr	r3, [pc, #100]	@ (800259c <vTaskStartScheduler+0xb0>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	4b12      	ldr	r3, [pc, #72]	@ (8002584 <vTaskStartScheduler+0x98>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d102      	bne.n	8002548 <vTaskStartScheduler+0x5c>
 8002542:	f002 fa65 	bl	8004a10 <SEGGER_SYSVIEW_OnIdle>
 8002546:	e004      	b.n	8002552 <vTaskStartScheduler+0x66>
 8002548:	4b14      	ldr	r3, [pc, #80]	@ (800259c <vTaskStartScheduler+0xb0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f002 fabd 	bl	8004acc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002552:	f000 fb4f 	bl	8002bf4 <xPortStartScheduler>
 8002556:	e00f      	b.n	8002578 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255e:	d10b      	bne.n	8002578 <vTaskStartScheduler+0x8c>
        __asm volatile
 8002560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	607b      	str	r3, [r7, #4]
    }
 8002572:	bf00      	nop
 8002574:	bf00      	nop
 8002576:	e7fd      	b.n	8002574 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002578:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <vTaskStartScheduler+0xb4>)
 800257a:	681b      	ldr	r3, [r3, #0]
}
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	200001d0 	.word	0x200001d0
 8002588:	08005840 	.word	0x08005840
 800258c:	08002979 	.word	0x08002979
 8002590:	200001cc 	.word	0x200001cc
 8002594:	200001b8 	.word	0x200001b8
 8002598:	200001b0 	.word	0x200001b0
 800259c:	200000d4 	.word	0x200000d4
 80025a0:	08005920 	.word	0x08005920

080025a4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80025a8:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <vTaskSuspendAll+0x18>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3301      	adds	r3, #1
 80025ae:	4a03      	ldr	r2, [pc, #12]	@ (80025bc <vTaskSuspendAll+0x18>)
 80025b0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	200001d4 	.word	0x200001d4

080025c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80025ce:	4b44      	ldr	r3, [pc, #272]	@ (80026e0 <xTaskResumeAll+0x120>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10b      	bne.n	80025ee <xTaskResumeAll+0x2e>
        __asm volatile
 80025d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025da:	f383 8811 	msr	BASEPRI, r3
 80025de:	f3bf 8f6f 	isb	sy
 80025e2:	f3bf 8f4f 	dsb	sy
 80025e6:	603b      	str	r3, [r7, #0]
    }
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	e7fd      	b.n	80025ea <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80025ee:	f000 fc25 	bl	8002e3c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80025f2:	4b3b      	ldr	r3, [pc, #236]	@ (80026e0 <xTaskResumeAll+0x120>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	4a39      	ldr	r2, [pc, #228]	@ (80026e0 <xTaskResumeAll+0x120>)
 80025fa:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025fc:	4b38      	ldr	r3, [pc, #224]	@ (80026e0 <xTaskResumeAll+0x120>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d165      	bne.n	80026d0 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002604:	4b37      	ldr	r3, [pc, #220]	@ (80026e4 <xTaskResumeAll+0x124>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d061      	beq.n	80026d0 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800260c:	e032      	b.n	8002674 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800260e:	4b36      	ldr	r3, [pc, #216]	@ (80026e8 <xTaskResumeAll+0x128>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3318      	adds	r3, #24
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fdd7 	bl	80021ce <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	3304      	adds	r3, #4
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fdd2 	bl	80021ce <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4618      	mov	r0, r3
 800262e:	f002 fa8f 	bl	8004b50 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002636:	2201      	movs	r2, #1
 8002638:	409a      	lsls	r2, r3
 800263a:	4b2c      	ldr	r3, [pc, #176]	@ (80026ec <xTaskResumeAll+0x12c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4313      	orrs	r3, r2
 8002640:	4a2a      	ldr	r2, [pc, #168]	@ (80026ec <xTaskResumeAll+0x12c>)
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4a27      	ldr	r2, [pc, #156]	@ (80026f0 <xTaskResumeAll+0x130>)
 8002652:	441a      	add	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3304      	adds	r3, #4
 8002658:	4619      	mov	r1, r3
 800265a:	4610      	mov	r0, r2
 800265c:	f7ff fd93 	bl	8002186 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002664:	4b23      	ldr	r3, [pc, #140]	@ (80026f4 <xTaskResumeAll+0x134>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266a:	429a      	cmp	r2, r3
 800266c:	d302      	bcc.n	8002674 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800266e:	4b22      	ldr	r3, [pc, #136]	@ (80026f8 <xTaskResumeAll+0x138>)
 8002670:	2201      	movs	r2, #1
 8002672:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002674:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <xTaskResumeAll+0x128>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1c8      	bne.n	800260e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002682:	f000 fa0f 	bl	8002aa4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002686:	4b1d      	ldr	r3, [pc, #116]	@ (80026fc <xTaskResumeAll+0x13c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d010      	beq.n	80026b4 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002692:	f000 f849 	bl	8002728 <xTaskIncrementTick>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 800269c:	4b16      	ldr	r3, [pc, #88]	@ (80026f8 <xTaskResumeAll+0x138>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f1      	bne.n	8002692 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 80026ae:	4b13      	ldr	r3, [pc, #76]	@ (80026fc <xTaskResumeAll+0x13c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80026b4:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <xTaskResumeAll+0x138>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d009      	beq.n	80026d0 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80026bc:	2301      	movs	r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80026c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002700 <xTaskResumeAll+0x140>)
 80026c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80026d0:	f000 fbe6 	bl	8002ea0 <vPortExitCritical>

    return xAlreadyYielded;
 80026d4:	68bb      	ldr	r3, [r7, #8]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200001d4 	.word	0x200001d4
 80026e4:	200001ac 	.word	0x200001ac
 80026e8:	2000016c 	.word	0x2000016c
 80026ec:	200001b4 	.word	0x200001b4
 80026f0:	200000d8 	.word	0x200000d8
 80026f4:	200000d4 	.word	0x200000d4
 80026f8:	200001c0 	.word	0x200001c0
 80026fc:	200001bc 	.word	0x200001bc
 8002700:	e000ed04 	.word	0xe000ed04

08002704 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800270a:	f000 fc87 	bl	800301c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002712:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <xTaskGetTickCountFromISR+0x20>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002718:	683b      	ldr	r3, [r7, #0]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200001b0 	.word	0x200001b0

08002728 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002732:	4b51      	ldr	r3, [pc, #324]	@ (8002878 <xTaskIncrementTick+0x150>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f040 8093 	bne.w	8002862 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800273c:	4b4f      	ldr	r3, [pc, #316]	@ (800287c <xTaskIncrementTick+0x154>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3301      	adds	r3, #1
 8002742:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002744:	4a4d      	ldr	r2, [pc, #308]	@ (800287c <xTaskIncrementTick+0x154>)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d121      	bne.n	8002794 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002750:	4b4b      	ldr	r3, [pc, #300]	@ (8002880 <xTaskIncrementTick+0x158>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <xTaskIncrementTick+0x4a>
        __asm volatile
 800275a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800275e:	f383 8811 	msr	BASEPRI, r3
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	603b      	str	r3, [r7, #0]
    }
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	e7fd      	b.n	800276e <xTaskIncrementTick+0x46>
 8002772:	4b43      	ldr	r3, [pc, #268]	@ (8002880 <xTaskIncrementTick+0x158>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	4b42      	ldr	r3, [pc, #264]	@ (8002884 <xTaskIncrementTick+0x15c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a40      	ldr	r2, [pc, #256]	@ (8002880 <xTaskIncrementTick+0x158>)
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4a40      	ldr	r2, [pc, #256]	@ (8002884 <xTaskIncrementTick+0x15c>)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b40      	ldr	r3, [pc, #256]	@ (8002888 <xTaskIncrementTick+0x160>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3301      	adds	r3, #1
 800278c:	4a3e      	ldr	r2, [pc, #248]	@ (8002888 <xTaskIncrementTick+0x160>)
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	f000 f988 	bl	8002aa4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002794:	4b3d      	ldr	r3, [pc, #244]	@ (800288c <xTaskIncrementTick+0x164>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	429a      	cmp	r2, r3
 800279c:	d34c      	bcc.n	8002838 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800279e:	4b38      	ldr	r3, [pc, #224]	@ (8002880 <xTaskIncrementTick+0x158>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d104      	bne.n	80027b2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027a8:	4b38      	ldr	r3, [pc, #224]	@ (800288c <xTaskIncrementTick+0x164>)
 80027aa:	f04f 32ff 	mov.w	r2, #4294967295
 80027ae:	601a      	str	r2, [r3, #0]
                    break;
 80027b0:	e042      	b.n	8002838 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027b2:	4b33      	ldr	r3, [pc, #204]	@ (8002880 <xTaskIncrementTick+0x158>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d203      	bcs.n	80027d2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80027ca:	4a30      	ldr	r2, [pc, #192]	@ (800288c <xTaskIncrementTick+0x164>)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80027d0:	e032      	b.n	8002838 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	3304      	adds	r3, #4
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fcf9 	bl	80021ce <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d004      	beq.n	80027ee <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	3318      	adds	r3, #24
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fcf0 	bl	80021ce <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f002 f9ad 	bl	8004b50 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fa:	2201      	movs	r2, #1
 80027fc:	409a      	lsls	r2, r3
 80027fe:	4b24      	ldr	r3, [pc, #144]	@ (8002890 <xTaskIncrementTick+0x168>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	4a22      	ldr	r2, [pc, #136]	@ (8002890 <xTaskIncrementTick+0x168>)
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4a1f      	ldr	r2, [pc, #124]	@ (8002894 <xTaskIncrementTick+0x16c>)
 8002816:	441a      	add	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	3304      	adds	r3, #4
 800281c:	4619      	mov	r1, r3
 800281e:	4610      	mov	r0, r2
 8002820:	f7ff fcb1 	bl	8002186 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002828:	4b1b      	ldr	r3, [pc, #108]	@ (8002898 <xTaskIncrementTick+0x170>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282e:	429a      	cmp	r2, r3
 8002830:	d3b5      	bcc.n	800279e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002832:	2301      	movs	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002836:	e7b2      	b.n	800279e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002838:	4b17      	ldr	r3, [pc, #92]	@ (8002898 <xTaskIncrementTick+0x170>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800283e:	4915      	ldr	r1, [pc, #84]	@ (8002894 <xTaskIncrementTick+0x16c>)
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d901      	bls.n	8002854 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8002850:	2301      	movs	r3, #1
 8002852:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002854:	4b11      	ldr	r3, [pc, #68]	@ (800289c <xTaskIncrementTick+0x174>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800285c:	2301      	movs	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	e004      	b.n	800286c <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002862:	4b0f      	ldr	r3, [pc, #60]	@ (80028a0 <xTaskIncrementTick+0x178>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	3301      	adds	r3, #1
 8002868:	4a0d      	ldr	r2, [pc, #52]	@ (80028a0 <xTaskIncrementTick+0x178>)
 800286a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800286c:	697b      	ldr	r3, [r7, #20]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200001d4 	.word	0x200001d4
 800287c:	200001b0 	.word	0x200001b0
 8002880:	20000164 	.word	0x20000164
 8002884:	20000168 	.word	0x20000168
 8002888:	200001c4 	.word	0x200001c4
 800288c:	200001cc 	.word	0x200001cc
 8002890:	200001b4 	.word	0x200001b4
 8002894:	200000d8 	.word	0x200000d8
 8002898:	200000d4 	.word	0x200000d4
 800289c:	200001c0 	.word	0x200001c0
 80028a0:	200001bc 	.word	0x200001bc

080028a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002960 <vTaskSwitchContext+0xbc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80028b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002964 <vTaskSwitchContext+0xc0>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80028b8:	e04e      	b.n	8002958 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80028ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002964 <vTaskSwitchContext+0xc0>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028c0:	4b29      	ldr	r3, [pc, #164]	@ (8002968 <vTaskSwitchContext+0xc4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80028ce:	7afb      	ldrb	r3, [r7, #11]
 80028d0:	f1c3 031f 	rsb	r3, r3, #31
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	4925      	ldr	r1, [pc, #148]	@ (800296c <vTaskSwitchContext+0xc8>)
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10b      	bne.n	8002902 <vTaskSwitchContext+0x5e>
        __asm volatile
 80028ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ee:	f383 8811 	msr	BASEPRI, r3
 80028f2:	f3bf 8f6f 	isb	sy
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	607b      	str	r3, [r7, #4]
    }
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	e7fd      	b.n	80028fe <vTaskSwitchContext+0x5a>
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4a17      	ldr	r2, [pc, #92]	@ (800296c <vTaskSwitchContext+0xc8>)
 800290e:	4413      	add	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	3308      	adds	r3, #8
 8002924:	429a      	cmp	r2, r3
 8002926:	d104      	bne.n	8002932 <vTaskSwitchContext+0x8e>
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a0d      	ldr	r2, [pc, #52]	@ (8002970 <vTaskSwitchContext+0xcc>)
 800293a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <vTaskSwitchContext+0xcc>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b0c      	ldr	r3, [pc, #48]	@ (8002974 <vTaskSwitchContext+0xd0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d102      	bne.n	800294e <vTaskSwitchContext+0xaa>
 8002948:	f002 f862 	bl	8004a10 <SEGGER_SYSVIEW_OnIdle>
}
 800294c:	e004      	b.n	8002958 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800294e:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <vTaskSwitchContext+0xcc>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f002 f8ba 	bl	8004acc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002958:	bf00      	nop
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	200001d4 	.word	0x200001d4
 8002964:	200001c0 	.word	0x200001c0
 8002968:	200001b4 	.word	0x200001b4
 800296c:	200000d8 	.word	0x200000d8
 8002970:	200000d4 	.word	0x200000d4
 8002974:	200001d0 	.word	0x200001d0

08002978 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002980:	f000 f852 	bl	8002a28 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <prvIdleTask+0x28>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d9f9      	bls.n	8002980 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <prvIdleTask+0x2c>)
 800298e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800299c:	e7f0      	b.n	8002980 <prvIdleTask+0x8>
 800299e:	bf00      	nop
 80029a0:	200000d8 	.word	0x200000d8
 80029a4:	e000ed04 	.word	0xe000ed04

080029a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	e00c      	b.n	80029ce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4a12      	ldr	r2, [pc, #72]	@ (8002a08 <prvInitialiseTaskLists+0x60>)
 80029c0:	4413      	add	r3, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fbb2 	bl	800212c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3301      	adds	r3, #1
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d9ef      	bls.n	80029b4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80029d4:	480d      	ldr	r0, [pc, #52]	@ (8002a0c <prvInitialiseTaskLists+0x64>)
 80029d6:	f7ff fba9 	bl	800212c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80029da:	480d      	ldr	r0, [pc, #52]	@ (8002a10 <prvInitialiseTaskLists+0x68>)
 80029dc:	f7ff fba6 	bl	800212c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80029e0:	480c      	ldr	r0, [pc, #48]	@ (8002a14 <prvInitialiseTaskLists+0x6c>)
 80029e2:	f7ff fba3 	bl	800212c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80029e6:	480c      	ldr	r0, [pc, #48]	@ (8002a18 <prvInitialiseTaskLists+0x70>)
 80029e8:	f7ff fba0 	bl	800212c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80029ec:	480b      	ldr	r0, [pc, #44]	@ (8002a1c <prvInitialiseTaskLists+0x74>)
 80029ee:	f7ff fb9d 	bl	800212c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80029f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a20 <prvInitialiseTaskLists+0x78>)
 80029f4:	4a05      	ldr	r2, [pc, #20]	@ (8002a0c <prvInitialiseTaskLists+0x64>)
 80029f6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80029f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <prvInitialiseTaskLists+0x7c>)
 80029fa:	4a05      	ldr	r2, [pc, #20]	@ (8002a10 <prvInitialiseTaskLists+0x68>)
 80029fc:	601a      	str	r2, [r3, #0]
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	200000d8 	.word	0x200000d8
 8002a0c:	2000013c 	.word	0x2000013c
 8002a10:	20000150 	.word	0x20000150
 8002a14:	2000016c 	.word	0x2000016c
 8002a18:	20000180 	.word	0x20000180
 8002a1c:	20000198 	.word	0x20000198
 8002a20:	20000164 	.word	0x20000164
 8002a24:	20000168 	.word	0x20000168

08002a28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a2e:	e019      	b.n	8002a64 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002a30:	f000 fa04 	bl	8002e3c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a34:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <prvCheckTasksWaitingTermination+0x50>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fbc4 	bl	80021ce <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002a46:	4b0d      	ldr	r3, [pc, #52]	@ (8002a7c <prvCheckTasksWaitingTermination+0x54>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a7c <prvCheckTasksWaitingTermination+0x54>)
 8002a4e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002a50:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <prvCheckTasksWaitingTermination+0x58>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	4a0a      	ldr	r2, [pc, #40]	@ (8002a80 <prvCheckTasksWaitingTermination+0x58>)
 8002a58:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002a5a:	f000 fa21 	bl	8002ea0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f810 	bl	8002a84 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a64:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <prvCheckTasksWaitingTermination+0x58>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1e1      	bne.n	8002a30 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000180 	.word	0x20000180
 8002a7c:	200001ac 	.word	0x200001ac
 8002a80:	20000194 	.word	0x20000194

08002a84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fbe7 	bl	8003264 <vPortFree>
                vPortFree( pxTCB );
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fbe4 	bl	8003264 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad4 <prvResetNextTaskUnblockTime+0x30>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d104      	bne.n	8002abc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002ab2:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <prvResetNextTaskUnblockTime+0x34>)
 8002ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002aba:	e005      	b.n	8002ac8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002abc:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <prvResetNextTaskUnblockTime+0x30>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a04      	ldr	r2, [pc, #16]	@ (8002ad8 <prvResetNextTaskUnblockTime+0x34>)
 8002ac6:	6013      	str	r3, [r2, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	20000164 	.word	0x20000164
 8002ad8:	200001cc 	.word	0x200001cc

08002adc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3b04      	subs	r3, #4
 8002aec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002af4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	3b04      	subs	r3, #4
 8002afa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f023 0201 	bic.w	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3b04      	subs	r3, #4
 8002b0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b40 <pxPortInitialiseStack+0x64>)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3b14      	subs	r3, #20
 8002b16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	3b04      	subs	r3, #4
 8002b22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f06f 0202 	mvn.w	r2, #2
 8002b2a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3b20      	subs	r3, #32
 8002b30:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002b32:	68fb      	ldr	r3, [r7, #12]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	08002b45 	.word	0x08002b45

08002b44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002b4e:	4b13      	ldr	r3, [pc, #76]	@ (8002b9c <prvTaskExitError+0x58>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b56:	d00b      	beq.n	8002b70 <prvTaskExitError+0x2c>
        __asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	60fb      	str	r3, [r7, #12]
    }
 8002b6a:	bf00      	nop
 8002b6c:	bf00      	nop
 8002b6e:	e7fd      	b.n	8002b6c <prvTaskExitError+0x28>
        __asm volatile
 8002b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	60bb      	str	r3, [r7, #8]
    }
 8002b82:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002b84:	bf00      	nop
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0fc      	beq.n	8002b86 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	2000000c 	.word	0x2000000c

08002ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ba0:	4b07      	ldr	r3, [pc, #28]	@ (8002bc0 <pxCurrentTCBConst2>)
 8002ba2:	6819      	ldr	r1, [r3, #0]
 8002ba4:	6808      	ldr	r0, [r1, #0]
 8002ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002baa:	f380 8809 	msr	PSP, r0
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f04f 0000 	mov.w	r0, #0
 8002bb6:	f380 8811 	msr	BASEPRI, r0
 8002bba:	4770      	bx	lr
 8002bbc:	f3af 8000 	nop.w

08002bc0 <pxCurrentTCBConst2>:
 8002bc0:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop

08002bc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002bc8:	4808      	ldr	r0, [pc, #32]	@ (8002bec <prvPortStartFirstTask+0x24>)
 8002bca:	6800      	ldr	r0, [r0, #0]
 8002bcc:	6800      	ldr	r0, [r0, #0]
 8002bce:	f380 8808 	msr	MSP, r0
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f380 8814 	msr	CONTROL, r0
 8002bda:	b662      	cpsie	i
 8002bdc:	b661      	cpsie	f
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	df00      	svc	0
 8002be8:	bf00      	nop
 8002bea:	0000      	.short	0x0000
 8002bec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop

08002bf4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002bfa:	4b47      	ldr	r3, [pc, #284]	@ (8002d18 <xPortStartScheduler+0x124>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a47      	ldr	r2, [pc, #284]	@ (8002d1c <xPortStartScheduler+0x128>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d10b      	bne.n	8002c1c <xPortStartScheduler+0x28>
        __asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	60fb      	str	r3, [r7, #12]
    }
 8002c16:	bf00      	nop
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c1c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d18 <xPortStartScheduler+0x124>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a3f      	ldr	r2, [pc, #252]	@ (8002d20 <xPortStartScheduler+0x12c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d10b      	bne.n	8002c3e <xPortStartScheduler+0x4a>
        __asm volatile
 8002c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	613b      	str	r3, [r7, #16]
    }
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	e7fd      	b.n	8002c3a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c3e:	4b39      	ldr	r3, [pc, #228]	@ (8002d24 <xPortStartScheduler+0x130>)
 8002c40:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	22ff      	movs	r2, #255	@ 0xff
 8002c4e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4b31      	ldr	r3, [pc, #196]	@ (8002d28 <xPortStartScheduler+0x134>)
 8002c64:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c66:	4b31      	ldr	r3, [pc, #196]	@ (8002d2c <xPortStartScheduler+0x138>)
 8002c68:	2207      	movs	r2, #7
 8002c6a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c6c:	e009      	b.n	8002c82 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8002c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8002d2c <xPortStartScheduler+0x138>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	4a2d      	ldr	r2, [pc, #180]	@ (8002d2c <xPortStartScheduler+0x138>)
 8002c76:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8a:	2b80      	cmp	r3, #128	@ 0x80
 8002c8c:	d0ef      	beq.n	8002c6e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c8e:	4b27      	ldr	r3, [pc, #156]	@ (8002d2c <xPortStartScheduler+0x138>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d00b      	beq.n	8002cb2 <xPortStartScheduler+0xbe>
        __asm volatile
 8002c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	60bb      	str	r3, [r7, #8]
    }
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	e7fd      	b.n	8002cae <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d2c <xPortStartScheduler+0x138>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d2c <xPortStartScheduler+0x138>)
 8002cba:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d2c <xPortStartScheduler+0x138>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cc4:	4a19      	ldr	r2, [pc, #100]	@ (8002d2c <xPortStartScheduler+0x138>)
 8002cc6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002cd0:	4b17      	ldr	r3, [pc, #92]	@ (8002d30 <xPortStartScheduler+0x13c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a16      	ldr	r2, [pc, #88]	@ (8002d30 <xPortStartScheduler+0x13c>)
 8002cd6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cda:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002cdc:	4b14      	ldr	r3, [pc, #80]	@ (8002d30 <xPortStartScheduler+0x13c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a13      	ldr	r2, [pc, #76]	@ (8002d30 <xPortStartScheduler+0x13c>)
 8002ce2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002ce6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002ce8:	f000 f968 	bl	8002fbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002cec:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <xPortStartScheduler+0x140>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002cf2:	f000 f987 	bl	8003004 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002cf6:	4b10      	ldr	r3, [pc, #64]	@ (8002d38 <xPortStartScheduler+0x144>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a0f      	ldr	r2, [pc, #60]	@ (8002d38 <xPortStartScheduler+0x144>)
 8002cfc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002d00:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002d02:	f7ff ff61 	bl	8002bc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002d06:	f7ff fdcd 	bl	80028a4 <vTaskSwitchContext>
    prvTaskExitError();
 8002d0a:	f7ff ff1b 	bl	8002b44 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	e000ed00 	.word	0xe000ed00
 8002d1c:	410fc271 	.word	0x410fc271
 8002d20:	410fc270 	.word	0x410fc270
 8002d24:	e000e400 	.word	0xe000e400
 8002d28:	200001d8 	.word	0x200001d8
 8002d2c:	200001dc 	.word	0x200001dc
 8002d30:	e000ed20 	.word	0xe000ed20
 8002d34:	2000000c 	.word	0x2000000c
 8002d38:	e000ef34 	.word	0xe000ef34

08002d3c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d42:	4b38      	ldr	r3, [pc, #224]	@ (8002e24 <vInitPrioGroupValue+0xe8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a38      	ldr	r2, [pc, #224]	@ (8002e28 <vInitPrioGroupValue+0xec>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d10b      	bne.n	8002d64 <vInitPrioGroupValue+0x28>
        __asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	60fb      	str	r3, [r7, #12]
    }
 8002d5e:	bf00      	nop
 8002d60:	bf00      	nop
 8002d62:	e7fd      	b.n	8002d60 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d64:	4b2f      	ldr	r3, [pc, #188]	@ (8002e24 <vInitPrioGroupValue+0xe8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a30      	ldr	r2, [pc, #192]	@ (8002e2c <vInitPrioGroupValue+0xf0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d10b      	bne.n	8002d86 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8002d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	613b      	str	r3, [r7, #16]
    }
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	e7fd      	b.n	8002d82 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d86:	4b2a      	ldr	r3, [pc, #168]	@ (8002e30 <vInitPrioGroupValue+0xf4>)
 8002d88:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	22ff      	movs	r2, #255	@ 0xff
 8002d96:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4b22      	ldr	r3, [pc, #136]	@ (8002e34 <vInitPrioGroupValue+0xf8>)
 8002dac:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002dae:	4b22      	ldr	r3, [pc, #136]	@ (8002e38 <vInitPrioGroupValue+0xfc>)
 8002db0:	2207      	movs	r2, #7
 8002db2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002db4:	e009      	b.n	8002dca <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8002db6:	4b20      	ldr	r3, [pc, #128]	@ (8002e38 <vInitPrioGroupValue+0xfc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002e38 <vInitPrioGroupValue+0xfc>)
 8002dbe:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd2:	2b80      	cmp	r3, #128	@ 0x80
 8002dd4:	d0ef      	beq.n	8002db6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002dd6:	4b18      	ldr	r3, [pc, #96]	@ (8002e38 <vInitPrioGroupValue+0xfc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f1c3 0307 	rsb	r3, r3, #7
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d00b      	beq.n	8002dfa <vInitPrioGroupValue+0xbe>
        __asm volatile
 8002de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	60bb      	str	r3, [r7, #8]
    }
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop
 8002df8:	e7fd      	b.n	8002df6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <vInitPrioGroupValue+0xfc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	4a0d      	ldr	r2, [pc, #52]	@ (8002e38 <vInitPrioGroupValue+0xfc>)
 8002e02:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e04:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <vInitPrioGroupValue+0xfc>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e38 <vInitPrioGroupValue+0xfc>)
 8002e0e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002e18:	bf00      	nop
 8002e1a:	371c      	adds	r7, #28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000ed00 	.word	0xe000ed00
 8002e28:	410fc271 	.word	0x410fc271
 8002e2c:	410fc270 	.word	0x410fc270
 8002e30:	e000e400 	.word	0xe000e400
 8002e34:	200001d8 	.word	0x200001d8
 8002e38:	200001dc 	.word	0x200001dc

08002e3c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
        __asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	607b      	str	r3, [r7, #4]
    }
 8002e54:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002e56:	4b10      	ldr	r3, [pc, #64]	@ (8002e98 <vPortEnterCritical+0x5c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	4a0e      	ldr	r2, [pc, #56]	@ (8002e98 <vPortEnterCritical+0x5c>)
 8002e5e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002e60:	4b0d      	ldr	r3, [pc, #52]	@ (8002e98 <vPortEnterCritical+0x5c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d110      	bne.n	8002e8a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e68:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <vPortEnterCritical+0x60>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <vPortEnterCritical+0x4e>
        __asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	603b      	str	r3, [r7, #0]
    }
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	e7fd      	b.n	8002e86 <vPortEnterCritical+0x4a>
    }
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	2000000c 	.word	0x2000000c
 8002e9c:	e000ed04 	.word	0xe000ed04

08002ea0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002ea6:	4b12      	ldr	r3, [pc, #72]	@ (8002ef0 <vPortExitCritical+0x50>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10b      	bne.n	8002ec6 <vPortExitCritical+0x26>
        __asm volatile
 8002eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	607b      	str	r3, [r7, #4]
    }
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	e7fd      	b.n	8002ec2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef0 <vPortExitCritical+0x50>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	4a08      	ldr	r2, [pc, #32]	@ (8002ef0 <vPortExitCritical+0x50>)
 8002ece:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002ed0:	4b07      	ldr	r3, [pc, #28]	@ (8002ef0 <vPortExitCritical+0x50>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <vPortExitCritical+0x44>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002ee2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	2000000c 	.word	0x2000000c
	...

08002f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002f00:	f3ef 8009 	mrs	r0, PSP
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	4b15      	ldr	r3, [pc, #84]	@ (8002f60 <pxCurrentTCBConst>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	f01e 0f10 	tst.w	lr, #16
 8002f10:	bf08      	it	eq
 8002f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f1a:	6010      	str	r0, [r2, #0]
 8002f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002f24:	f380 8811 	msr	BASEPRI, r0
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f7ff fcb8 	bl	80028a4 <vTaskSwitchContext>
 8002f34:	f04f 0000 	mov.w	r0, #0
 8002f38:	f380 8811 	msr	BASEPRI, r0
 8002f3c:	bc09      	pop	{r0, r3}
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	6808      	ldr	r0, [r1, #0]
 8002f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f46:	f01e 0f10 	tst.w	lr, #16
 8002f4a:	bf08      	it	eq
 8002f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f50:	f380 8809 	msr	PSP, r0
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	f3af 8000 	nop.w

08002f60 <pxCurrentTCBConst>:
 8002f60:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop

08002f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
        __asm volatile
 8002f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	607b      	str	r3, [r7, #4]
    }
 8002f80:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002f82:	f001 fccb 	bl	800491c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002f86:	f7ff fbcf 	bl	8002728 <xTaskIncrementTick>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d006      	beq.n	8002f9e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002f90:	f001 fd22 	bl	80049d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f94:	4b08      	ldr	r3, [pc, #32]	@ (8002fb8 <SysTick_Handler+0x50>)
 8002f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	e001      	b.n	8002fa2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002f9e:	f001 fcff 	bl	80049a0 <SEGGER_SYSVIEW_RecordExitISR>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f383 8811 	msr	BASEPRI, r3
    }
 8002fac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	e000ed04 	.word	0xe000ed04

08002fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff0 <vPortSetupTimerInterrupt+0x34>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <vPortSetupTimerInterrupt+0x38>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff8 <vPortSetupTimerInterrupt+0x3c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ffc <vPortSetupTimerInterrupt+0x40>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	099b      	lsrs	r3, r3, #6
 8002fd8:	4a09      	ldr	r2, [pc, #36]	@ (8003000 <vPortSetupTimerInterrupt+0x44>)
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002fde:	4b04      	ldr	r3, [pc, #16]	@ (8002ff0 <vPortSetupTimerInterrupt+0x34>)
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	601a      	str	r2, [r3, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000e010 	.word	0xe000e010
 8002ff4:	e000e018 	.word	0xe000e018
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	10624dd3 	.word	0x10624dd3
 8003000:	e000e014 	.word	0xe000e014

08003004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003004:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003014 <vPortEnableVFP+0x10>
 8003008:	6801      	ldr	r1, [r0, #0]
 800300a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800300e:	6001      	str	r1, [r0, #0]
 8003010:	4770      	bx	lr
 8003012:	0000      	.short	0x0000
 8003014:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop

0800301c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003022:	f3ef 8305 	mrs	r3, IPSR
 8003026:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b0f      	cmp	r3, #15
 800302c:	d915      	bls.n	800305a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800302e:	4a18      	ldr	r2, [pc, #96]	@ (8003090 <vPortValidateInterruptPriority+0x74>)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003038:	4b16      	ldr	r3, [pc, #88]	@ (8003094 <vPortValidateInterruptPriority+0x78>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	7afa      	ldrb	r2, [r7, #11]
 800303e:	429a      	cmp	r2, r3
 8003040:	d20b      	bcs.n	800305a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8003042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	607b      	str	r3, [r7, #4]
    }
 8003054:	bf00      	nop
 8003056:	bf00      	nop
 8003058:	e7fd      	b.n	8003056 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800305a:	4b0f      	ldr	r3, [pc, #60]	@ (8003098 <vPortValidateInterruptPriority+0x7c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003062:	4b0e      	ldr	r3, [pc, #56]	@ (800309c <vPortValidateInterruptPriority+0x80>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d90b      	bls.n	8003082 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	603b      	str	r3, [r7, #0]
    }
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	e7fd      	b.n	800307e <vPortValidateInterruptPriority+0x62>
    }
 8003082:	bf00      	nop
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000e3f0 	.word	0xe000e3f0
 8003094:	200001d8 	.word	0x200001d8
 8003098:	e000ed0c 	.word	0xe000ed0c
 800309c:	200001dc 	.word	0x200001dc

080030a0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	@ 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80030ac:	f7ff fa7a 	bl	80025a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80030b0:	4b66      	ldr	r3, [pc, #408]	@ (800324c <pvPortMalloc+0x1ac>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80030b8:	f000 f938 	bl	800332c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80030bc:	4b64      	ldr	r3, [pc, #400]	@ (8003250 <pvPortMalloc+0x1b0>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f040 80a9 	bne.w	800321c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d02e      	beq.n	800312e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80030d0:	2208      	movs	r2, #8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d228      	bcs.n	800312e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 80030dc:	2208      	movs	r2, #8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d022      	beq.n	8003134 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f023 0307 	bic.w	r3, r3, #7
 80030f4:	3308      	adds	r3, #8
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d215      	bcs.n	8003128 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f023 0307 	bic.w	r3, r3, #7
 8003102:	3308      	adds	r3, #8
 8003104:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	2b00      	cmp	r3, #0
 800310e:	d011      	beq.n	8003134 <pvPortMalloc+0x94>
        __asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	617b      	str	r3, [r7, #20]
    }
 8003122:	bf00      	nop
 8003124:	bf00      	nop
 8003126:	e7fd      	b.n	8003124 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800312c:	e002      	b.n	8003134 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	e000      	b.n	8003136 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003134:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d06f      	beq.n	800321c <pvPortMalloc+0x17c>
 800313c:	4b45      	ldr	r3, [pc, #276]	@ (8003254 <pvPortMalloc+0x1b4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	429a      	cmp	r2, r3
 8003144:	d86a      	bhi.n	800321c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003146:	4b44      	ldr	r3, [pc, #272]	@ (8003258 <pvPortMalloc+0x1b8>)
 8003148:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800314a:	4b43      	ldr	r3, [pc, #268]	@ (8003258 <pvPortMalloc+0x1b8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003150:	e004      	b.n	800315c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	429a      	cmp	r2, r3
 8003164:	d903      	bls.n	800316e <pvPortMalloc+0xce>
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f1      	bne.n	8003152 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800316e:	4b37      	ldr	r3, [pc, #220]	@ (800324c <pvPortMalloc+0x1ac>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003174:	429a      	cmp	r2, r3
 8003176:	d051      	beq.n	800321c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2208      	movs	r2, #8
 800317e:	4413      	add	r3, r2
 8003180:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	1ad2      	subs	r2, r2, r3
 8003192:	2308      	movs	r3, #8
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	429a      	cmp	r2, r3
 8003198:	d920      	bls.n	80031dc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800319a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4413      	add	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00b      	beq.n	80031c4 <pvPortMalloc+0x124>
        __asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	613b      	str	r3, [r7, #16]
    }
 80031be:	bf00      	nop
 80031c0:	bf00      	nop
 80031c2:	e7fd      	b.n	80031c0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80031c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	1ad2      	subs	r2, r2, r3
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80031d6:	69b8      	ldr	r0, [r7, #24]
 80031d8:	f000 f90a 	bl	80033f0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003254 <pvPortMalloc+0x1b4>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003254 <pvPortMalloc+0x1b4>)
 80031e8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003254 <pvPortMalloc+0x1b4>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b1b      	ldr	r3, [pc, #108]	@ (800325c <pvPortMalloc+0x1bc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d203      	bcs.n	80031fe <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031f6:	4b17      	ldr	r3, [pc, #92]	@ (8003254 <pvPortMalloc+0x1b4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a18      	ldr	r2, [pc, #96]	@ (800325c <pvPortMalloc+0x1bc>)
 80031fc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <pvPortMalloc+0x1b0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	431a      	orrs	r2, r3
 8003208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800320c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003212:	4b13      	ldr	r3, [pc, #76]	@ (8003260 <pvPortMalloc+0x1c0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3301      	adds	r3, #1
 8003218:	4a11      	ldr	r2, [pc, #68]	@ (8003260 <pvPortMalloc+0x1c0>)
 800321a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800321c:	f7ff f9d0 	bl	80025c0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00b      	beq.n	8003242 <pvPortMalloc+0x1a2>
        __asm volatile
 800322a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	60fb      	str	r3, [r7, #12]
    }
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	e7fd      	b.n	800323e <pvPortMalloc+0x19e>
    return pvReturn;
 8003242:	69fb      	ldr	r3, [r7, #28]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3728      	adds	r7, #40	@ 0x28
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20012de8 	.word	0x20012de8
 8003250:	20012dfc 	.word	0x20012dfc
 8003254:	20012dec 	.word	0x20012dec
 8003258:	20012de0 	.word	0x20012de0
 800325c:	20012df0 	.word	0x20012df0
 8003260:	20012df4 	.word	0x20012df4

08003264 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d04f      	beq.n	8003316 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003276:	2308      	movs	r3, #8
 8003278:	425b      	negs	r3, r3
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4413      	add	r3, r2
 800327e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	4b25      	ldr	r3, [pc, #148]	@ (8003320 <vPortFree+0xbc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10b      	bne.n	80032aa <vPortFree+0x46>
        __asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	60fb      	str	r3, [r7, #12]
    }
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	e7fd      	b.n	80032a6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00b      	beq.n	80032ca <vPortFree+0x66>
        __asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	60bb      	str	r3, [r7, #8]
    }
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	e7fd      	b.n	80032c6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	4b14      	ldr	r3, [pc, #80]	@ (8003320 <vPortFree+0xbc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01e      	beq.n	8003316 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d11a      	bne.n	8003316 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003320 <vPortFree+0xbc>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	401a      	ands	r2, r3
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80032f0:	f7ff f958 	bl	80025a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003324 <vPortFree+0xc0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4413      	add	r3, r2
 80032fe:	4a09      	ldr	r2, [pc, #36]	@ (8003324 <vPortFree+0xc0>)
 8003300:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003302:	6938      	ldr	r0, [r7, #16]
 8003304:	f000 f874 	bl	80033f0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003308:	4b07      	ldr	r3, [pc, #28]	@ (8003328 <vPortFree+0xc4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3301      	adds	r3, #1
 800330e:	4a06      	ldr	r2, [pc, #24]	@ (8003328 <vPortFree+0xc4>)
 8003310:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003312:	f7ff f955 	bl	80025c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003316:	bf00      	nop
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20012dfc 	.word	0x20012dfc
 8003324:	20012dec 	.word	0x20012dec
 8003328:	20012df8 	.word	0x20012df8

0800332c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003332:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003336:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003338:	4b27      	ldr	r3, [pc, #156]	@ (80033d8 <prvHeapInit+0xac>)
 800333a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00c      	beq.n	8003360 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	3307      	adds	r3, #7
 800334a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0307 	bic.w	r3, r3, #7
 8003352:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	4a1f      	ldr	r2, [pc, #124]	@ (80033d8 <prvHeapInit+0xac>)
 800335c:	4413      	add	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003364:	4a1d      	ldr	r2, [pc, #116]	@ (80033dc <prvHeapInit+0xb0>)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800336a:	4b1c      	ldr	r3, [pc, #112]	@ (80033dc <prvHeapInit+0xb0>)
 800336c:	2200      	movs	r2, #0
 800336e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	4413      	add	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003378:	2208      	movs	r2, #8
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0307 	bic.w	r3, r3, #7
 8003386:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4a15      	ldr	r2, [pc, #84]	@ (80033e0 <prvHeapInit+0xb4>)
 800338c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800338e:	4b14      	ldr	r3, [pc, #80]	@ (80033e0 <prvHeapInit+0xb4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003396:	4b12      	ldr	r3, [pc, #72]	@ (80033e0 <prvHeapInit+0xb4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	1ad2      	subs	r2, r2, r3
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80033ac:	4b0c      	ldr	r3, [pc, #48]	@ (80033e0 <prvHeapInit+0xb4>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	4a0a      	ldr	r2, [pc, #40]	@ (80033e4 <prvHeapInit+0xb8>)
 80033ba:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4a09      	ldr	r2, [pc, #36]	@ (80033e8 <prvHeapInit+0xbc>)
 80033c2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80033c4:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <prvHeapInit+0xc0>)
 80033c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80033ca:	601a      	str	r2, [r3, #0]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	200001e0 	.word	0x200001e0
 80033dc:	20012de0 	.word	0x20012de0
 80033e0:	20012de8 	.word	0x20012de8
 80033e4:	20012df0 	.word	0x20012df0
 80033e8:	20012dec 	.word	0x20012dec
 80033ec:	20012dfc 	.word	0x20012dfc

080033f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80033f8:	4b28      	ldr	r3, [pc, #160]	@ (800349c <prvInsertBlockIntoFreeList+0xac>)
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	e002      	b.n	8003404 <prvInsertBlockIntoFreeList+0x14>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	429a      	cmp	r2, r3
 800340c:	d8f7      	bhi.n	80033fe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	4413      	add	r3, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	429a      	cmp	r2, r3
 800341e:	d108      	bne.n	8003432 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	441a      	add	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	441a      	add	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d118      	bne.n	8003478 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4b15      	ldr	r3, [pc, #84]	@ (80034a0 <prvInsertBlockIntoFreeList+0xb0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d00d      	beq.n	800346e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	441a      	add	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e008      	b.n	8003480 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800346e:	4b0c      	ldr	r3, [pc, #48]	@ (80034a0 <prvInsertBlockIntoFreeList+0xb0>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	e003      	b.n	8003480 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	429a      	cmp	r2, r3
 8003486:	d002      	beq.n	800348e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800348e:	bf00      	nop
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20012de0 	.word	0x20012de0
 80034a0:	20012de8 	.word	0x20012de8

080034a4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80034a8:	4803      	ldr	r0, [pc, #12]	@ (80034b8 <_cbSendSystemDesc+0x14>)
 80034aa:	f001 f9e1 	bl	8004870 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80034ae:	4803      	ldr	r0, [pc, #12]	@ (80034bc <_cbSendSystemDesc+0x18>)
 80034b0:	f001 f9de 	bl	8004870 <SEGGER_SYSVIEW_SendSysDesc>
}
 80034b4:	bf00      	nop
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	08005848 	.word	0x08005848
 80034bc:	08005880 	.word	0x08005880

080034c0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80034c4:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <SEGGER_SYSVIEW_Conf+0x20>)
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	4b05      	ldr	r3, [pc, #20]	@ (80034e0 <SEGGER_SYSVIEW_Conf+0x20>)
 80034ca:	6819      	ldr	r1, [r3, #0]
 80034cc:	4b05      	ldr	r3, [pc, #20]	@ (80034e4 <SEGGER_SYSVIEW_Conf+0x24>)
 80034ce:	4a06      	ldr	r2, [pc, #24]	@ (80034e8 <SEGGER_SYSVIEW_Conf+0x28>)
 80034d0:	f000 fe54 	bl	800417c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80034d4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80034d8:	f000 fe94 	bl	8004204 <SEGGER_SYSVIEW_SetRAMBase>
}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000000 	.word	0x20000000
 80034e4:	080034a5 	.word	0x080034a5
 80034e8:	08005924 	.word	0x08005924

080034ec <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80034ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80034f2:	2300      	movs	r3, #0
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	e033      	b.n	8003560 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80034f8:	491e      	ldr	r1, [pc, #120]	@ (8003574 <_cbSendTaskList+0x88>)
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	491a      	ldr	r1, [pc, #104]	@ (8003574 <_cbSendTaskList+0x88>)
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	3304      	adds	r3, #4
 8003518:	6819      	ldr	r1, [r3, #0]
 800351a:	4c16      	ldr	r4, [pc, #88]	@ (8003574 <_cbSendTaskList+0x88>)
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4423      	add	r3, r4
 8003528:	3308      	adds	r3, #8
 800352a:	681c      	ldr	r4, [r3, #0]
 800352c:	4d11      	ldr	r5, [pc, #68]	@ (8003574 <_cbSendTaskList+0x88>)
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	442b      	add	r3, r5
 800353a:	330c      	adds	r3, #12
 800353c:	681d      	ldr	r5, [r3, #0]
 800353e:	4e0d      	ldr	r6, [pc, #52]	@ (8003574 <_cbSendTaskList+0x88>)
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4433      	add	r3, r6
 800354c:	3310      	adds	r3, #16
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	462b      	mov	r3, r5
 8003554:	4622      	mov	r2, r4
 8003556:	f000 f8bd 	bl	80036d4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3301      	adds	r3, #1
 800355e:	607b      	str	r3, [r7, #4]
 8003560:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <_cbSendTaskList+0x8c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	429a      	cmp	r2, r3
 8003568:	d3c6      	bcc.n	80034f8 <_cbSendTaskList+0xc>
  }
}
 800356a:	bf00      	nop
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003574:	20012e00 	.word	0x20012e00
 8003578:	20012ea0 	.word	0x20012ea0

0800357c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800357c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003584:	f7ff f8be 	bl	8002704 <xTaskGetTickCountFromISR>
 8003588:	4603      	mov	r3, r0
 800358a:	2200      	movs	r2, #0
 800358c:	469a      	mov	sl, r3
 800358e:	4693      	mov	fp, r2
 8003590:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003594:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	f04f 0a00 	mov.w	sl, #0
 80035a0:	f04f 0b00 	mov.w	fp, #0
 80035a4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80035a8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80035ac:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80035b0:	4652      	mov	r2, sl
 80035b2:	465b      	mov	r3, fp
 80035b4:	1a14      	subs	r4, r2, r0
 80035b6:	eb63 0501 	sbc.w	r5, r3, r1
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	00ab      	lsls	r3, r5, #2
 80035c4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80035c8:	00a2      	lsls	r2, r4, #2
 80035ca:	4614      	mov	r4, r2
 80035cc:	461d      	mov	r5, r3
 80035ce:	eb14 0800 	adds.w	r8, r4, r0
 80035d2:	eb45 0901 	adc.w	r9, r5, r1
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ea:	4690      	mov	r8, r2
 80035ec:	4699      	mov	r9, r3
 80035ee:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80035f2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003604 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003612:	2205      	movs	r2, #5
 8003614:	492b      	ldr	r1, [pc, #172]	@ (80036c4 <SYSVIEW_AddTask+0xc0>)
 8003616:	68b8      	ldr	r0, [r7, #8]
 8003618:	f001 fe1e 	bl	8005258 <memcmp>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d04b      	beq.n	80036ba <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003622:	4b29      	ldr	r3, [pc, #164]	@ (80036c8 <SYSVIEW_AddTask+0xc4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b07      	cmp	r3, #7
 8003628:	d903      	bls.n	8003632 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800362a:	4828      	ldr	r0, [pc, #160]	@ (80036cc <SYSVIEW_AddTask+0xc8>)
 800362c:	f001 fbae 	bl	8004d8c <SEGGER_SYSVIEW_Warn>
    return;
 8003630:	e044      	b.n	80036bc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003632:	4b25      	ldr	r3, [pc, #148]	@ (80036c8 <SYSVIEW_AddTask+0xc4>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4926      	ldr	r1, [pc, #152]	@ (80036d0 <SYSVIEW_AddTask+0xcc>)
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003646:	4b20      	ldr	r3, [pc, #128]	@ (80036c8 <SYSVIEW_AddTask+0xc4>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4921      	ldr	r1, [pc, #132]	@ (80036d0 <SYSVIEW_AddTask+0xcc>)
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	3304      	adds	r3, #4
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800365c:	4b1a      	ldr	r3, [pc, #104]	@ (80036c8 <SYSVIEW_AddTask+0xc4>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	491b      	ldr	r1, [pc, #108]	@ (80036d0 <SYSVIEW_AddTask+0xcc>)
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	3308      	adds	r3, #8
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003672:	4b15      	ldr	r3, [pc, #84]	@ (80036c8 <SYSVIEW_AddTask+0xc4>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	4916      	ldr	r1, [pc, #88]	@ (80036d0 <SYSVIEW_AddTask+0xcc>)
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	330c      	adds	r3, #12
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003688:	4b0f      	ldr	r3, [pc, #60]	@ (80036c8 <SYSVIEW_AddTask+0xc4>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4910      	ldr	r1, [pc, #64]	@ (80036d0 <SYSVIEW_AddTask+0xcc>)
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	3310      	adds	r3, #16
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800369e:	4b0a      	ldr	r3, [pc, #40]	@ (80036c8 <SYSVIEW_AddTask+0xc4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3301      	adds	r3, #1
 80036a4:	4a08      	ldr	r2, [pc, #32]	@ (80036c8 <SYSVIEW_AddTask+0xc4>)
 80036a6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f80e 	bl	80036d4 <SYSVIEW_SendTaskInfo>
 80036b8:	e000      	b.n	80036bc <SYSVIEW_AddTask+0xb8>
    return;
 80036ba:	bf00      	nop

}
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	08005890 	.word	0x08005890
 80036c8:	20012ea0 	.word	0x20012ea0
 80036cc:	08005898 	.word	0x08005898
 80036d0:	20012e00 	.word	0x20012e00

080036d4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	@ 0x28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80036e2:	f107 0314 	add.w	r3, r7, #20
 80036e6:	2214      	movs	r2, #20
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 fdc4 	bl	8005278 <memset>
  TaskInfo.TaskID     = TaskID;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003702:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	4618      	mov	r0, r3
 800370a:	f000 ffb9 	bl	8004680 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800370e:	bf00      	nop
 8003710:	3728      	adds	r7, #40	@ 0x28
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800371e:	4b24      	ldr	r3, [pc, #144]	@ (80037b0 <_DoInit+0x98>)
 8003720:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2203      	movs	r2, #3
 8003726:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2203      	movs	r2, #3
 800372c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a20      	ldr	r2, [pc, #128]	@ (80037b4 <_DoInit+0x9c>)
 8003732:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a20      	ldr	r2, [pc, #128]	@ (80037b8 <_DoInit+0xa0>)
 8003738:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003740:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a17      	ldr	r2, [pc, #92]	@ (80037b4 <_DoInit+0x9c>)
 8003758:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a17      	ldr	r2, [pc, #92]	@ (80037bc <_DoInit+0xa4>)
 800375e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2210      	movs	r2, #16
 8003764:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3307      	adds	r3, #7
 800377c:	4a10      	ldr	r2, [pc, #64]	@ (80037c0 <_DoInit+0xa8>)
 800377e:	6810      	ldr	r0, [r2, #0]
 8003780:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003782:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a0e      	ldr	r2, [pc, #56]	@ (80037c4 <_DoInit+0xac>)
 800378a:	6810      	ldr	r0, [r2, #0]
 800378c:	6018      	str	r0, [r3, #0]
 800378e:	8891      	ldrh	r1, [r2, #4]
 8003790:	7992      	ldrb	r2, [r2, #6]
 8003792:	8099      	strh	r1, [r3, #4]
 8003794:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003796:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80037a0:	f3bf 8f5f 	dmb	sy
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	20012ea4 	.word	0x20012ea4
 80037b4:	080058e8 	.word	0x080058e8
 80037b8:	20012f4c 	.word	0x20012f4c
 80037bc:	2001334c 	.word	0x2001334c
 80037c0:	080058f4 	.word	0x080058f4
 80037c4:	080058f8 	.word	0x080058f8

080037c8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	@ 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80037d4:	2300      	movs	r3, #0
 80037d6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d905      	bls.n	80037f8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f6:	e007      	b.n	8003808 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	69b9      	ldr	r1, [r7, #24]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	1acb      	subs	r3, r1, r3
 8003802:	4413      	add	r3, r2
 8003804:	3b01      	subs	r3, #1
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003812:	4293      	cmp	r3, r2
 8003814:	bf28      	it	cs
 8003816:	4613      	movcs	r3, r2
 8003818:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800381a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4293      	cmp	r3, r2
 8003820:	bf28      	it	cs
 8003822:	4613      	movcs	r3, r2
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	4413      	add	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	6978      	ldr	r0, [r7, #20]
 8003836:	f001 fd82 	bl	800533e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800383a:	6a3a      	ldr	r2, [r7, #32]
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	4413      	add	r3, r2
 8003840:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	4413      	add	r3, r2
 8003848:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	4413      	add	r3, r2
 8003858:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	429a      	cmp	r2, r3
 8003862:	d101      	bne.n	8003868 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003864:	2300      	movs	r3, #0
 8003866:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003868:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1b2      	bne.n	80037de <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003878:	6a3b      	ldr	r3, [r7, #32]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3728      	adds	r7, #40	@ 0x28
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003882:	b580      	push	{r7, lr}
 8003884:	b088      	sub	sp, #32
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d911      	bls.n	80038ca <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	68b9      	ldr	r1, [r7, #8]
 80038b4:	6938      	ldr	r0, [r7, #16]
 80038b6:	f001 fd42 	bl	800533e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80038ba:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	441a      	add	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80038c8:	e01f      	b.n	800390a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	4413      	add	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	6938      	ldr	r0, [r7, #16]
 80038de:	f001 fd2e 	bl	800533e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	4413      	add	r3, r2
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4619      	mov	r1, r3
 80038fa:	6938      	ldr	r0, [r7, #16]
 80038fc:	f001 fd1f 	bl	800533e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003900:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	60da      	str	r2, [r3, #12]
}
 800390a:	bf00      	nop
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003912:	b480      	push	{r7}
 8003914:	b087      	sub	sp, #28
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	429a      	cmp	r2, r3
 800392c:	d808      	bhi.n	8003940 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad2      	subs	r2, r2, r3
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4413      	add	r3, r2
 800393a:	3b01      	subs	r3, #1
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e004      	b.n	800394a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	617b      	str	r3, [r7, #20]
  }
  return r;
 800394a:	697b      	ldr	r3, [r7, #20]
}
 800394c:	4618      	mov	r0, r3
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b08c      	sub	sp, #48	@ 0x30
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003964:	4b3e      	ldr	r3, [pc, #248]	@ (8003a60 <SEGGER_RTT_ReadNoLock+0x108>)
 8003966:	623b      	str	r3, [r7, #32]
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <SEGGER_RTT_ReadNoLock+0x1e>
 8003972:	f7ff fed1 	bl	8003718 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4613      	mov	r3, r2
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	4413      	add	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	3360      	adds	r3, #96	@ 0x60
 8003982:	4a37      	ldr	r2, [pc, #220]	@ (8003a60 <SEGGER_RTT_ReadNoLock+0x108>)
 8003984:	4413      	add	r3, r2
 8003986:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003998:	2300      	movs	r3, #0
 800399a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800399c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d92b      	bls.n	80039fc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4293      	cmp	r3, r2
 80039b4:	bf28      	it	cs
 80039b6:	4613      	movcs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c0:	4413      	add	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	6939      	ldr	r1, [r7, #16]
 80039c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039ca:	f001 fcb8 	bl	800533e <memcpy>
    NumBytesRead += NumBytesRem;
 80039ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	4413      	add	r3, r2
 80039d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80039d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	4413      	add	r3, r2
 80039dc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80039e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	4413      	add	r3, r2
 80039ec:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d101      	bne.n	80039fc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80039f8:	2300      	movs	r3, #0
 80039fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	bf28      	it	cs
 8003a0c:	4613      	movcs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d019      	beq.n	8003a4a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1c:	4413      	add	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	6939      	ldr	r1, [r7, #16]
 8003a24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a26:	f001 fc8a 	bl	800533e <memcpy>
    NumBytesRead += NumBytesRem;
 8003a2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	4413      	add	r3, r2
 8003a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	4413      	add	r3, r2
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003a42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	4413      	add	r3, r2
 8003a48:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a54:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3730      	adds	r7, #48	@ 0x30
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20012ea4 	.word	0x20012ea4

08003a64 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	4613      	mov	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4a1f      	ldr	r2, [pc, #124]	@ (8003b00 <SEGGER_RTT_WriteNoLock+0x9c>)
 8003a82:	4413      	add	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d029      	beq.n	8003ae2 <SEGGER_RTT_WriteNoLock+0x7e>
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d82e      	bhi.n	8003af0 <SEGGER_RTT_WriteNoLock+0x8c>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <SEGGER_RTT_WriteNoLock+0x38>
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d013      	beq.n	8003ac2 <SEGGER_RTT_WriteNoLock+0x5e>
 8003a9a:	e029      	b.n	8003af0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003a9c:	6978      	ldr	r0, [r7, #20]
 8003a9e:	f7ff ff38 	bl	8003912 <_GetAvailWriteSpace>
 8003aa2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d202      	bcs.n	8003ab2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003ab0:	e021      	b.n	8003af6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	69b9      	ldr	r1, [r7, #24]
 8003aba:	6978      	ldr	r0, [r7, #20]
 8003abc:	f7ff fee1 	bl	8003882 <_WriteNoCheck>
    break;
 8003ac0:	e019      	b.n	8003af6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003ac2:	6978      	ldr	r0, [r7, #20]
 8003ac4:	f7ff ff25 	bl	8003912 <_GetAvailWriteSpace>
 8003ac8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	bf28      	it	cs
 8003ad2:	4613      	movcs	r3, r2
 8003ad4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	69b9      	ldr	r1, [r7, #24]
 8003ada:	6978      	ldr	r0, [r7, #20]
 8003adc:	f7ff fed1 	bl	8003882 <_WriteNoCheck>
    break;
 8003ae0:	e009      	b.n	8003af6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	69b9      	ldr	r1, [r7, #24]
 8003ae6:	6978      	ldr	r0, [r7, #20]
 8003ae8:	f7ff fe6e 	bl	80037c8 <_WriteBlocking>
 8003aec:	61f8      	str	r0, [r7, #28]
    break;
 8003aee:	e002      	b.n	8003af6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61fb      	str	r3, [r7, #28]
    break;
 8003af4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003af6:	69fb      	ldr	r3, [r7, #28]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20012ea4 	.word	0x20012ea4

08003b04 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003b10:	4b0e      	ldr	r3, [pc, #56]	@ (8003b4c <SEGGER_RTT_Write+0x48>)
 8003b12:	61fb      	str	r3, [r7, #28]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <SEGGER_RTT_Write+0x1e>
 8003b1e:	f7ff fdfb 	bl	8003718 <_DoInit>
  SEGGER_RTT_LOCK();
 8003b22:	f3ef 8311 	mrs	r3, BASEPRI
 8003b26:	f04f 0120 	mov.w	r1, #32
 8003b2a:	f381 8811 	msr	BASEPRI, r1
 8003b2e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff ff95 	bl	8003a64 <SEGGER_RTT_WriteNoLock>
 8003b3a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003b42:	697b      	ldr	r3, [r7, #20]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20012ea4 	.word	0x20012ea4

08003b50 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c54 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003b6c:	f7ff fdd4 	bl	8003718 <_DoInit>
  SEGGER_RTT_LOCK();
 8003b70:	f3ef 8311 	mrs	r3, BASEPRI
 8003b74:	f04f 0120 	mov.w	r1, #32
 8003b78:	f381 8811 	msr	BASEPRI, r1
 8003b7c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b7e:	4b35      	ldr	r3, [pc, #212]	@ (8003c54 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003b80:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003b86:	6939      	ldr	r1, [r7, #16]
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	4413      	add	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	440b      	add	r3, r1
 8003b96:	3304      	adds	r3, #4
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	69fa      	ldr	r2, [r7, #28]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	dbeb      	blt.n	8003b86 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003bae:	e000      	b.n	8003bb2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003bb0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	69fa      	ldr	r2, [r7, #28]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	da3f      	bge.n	8003c3c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003bbc:	6939      	ldr	r1, [r7, #16]
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	4413      	add	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	440b      	add	r3, r1
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003bd0:	6939      	ldr	r1, [r7, #16]
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	440b      	add	r3, r1
 8003be0:	3304      	adds	r3, #4
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003be6:	6939      	ldr	r1, [r7, #16]
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	4613      	mov	r3, r2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	4413      	add	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	440b      	add	r3, r1
 8003bf4:	3320      	adds	r3, #32
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003bfa:	6939      	ldr	r1, [r7, #16]
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	4413      	add	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	440b      	add	r3, r1
 8003c08:	3328      	adds	r3, #40	@ 0x28
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003c0e:	6939      	ldr	r1, [r7, #16]
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	4613      	mov	r3, r2
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	4413      	add	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	440b      	add	r3, r1
 8003c1c:	3324      	adds	r3, #36	@ 0x24
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003c22:	6939      	ldr	r1, [r7, #16]
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	4613      	mov	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4413      	add	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	440b      	add	r3, r1
 8003c30:	332c      	adds	r3, #44	@ 0x2c
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c36:	f3bf 8f5f 	dmb	sy
 8003c3a:	e002      	b.n	8003c42 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c40:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003c48:	69fb      	ldr	r3, [r7, #28]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20012ea4 	.word	0x20012ea4

08003c58 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003c66:	4b33      	ldr	r3, [pc, #204]	@ (8003d34 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003c74:	f7ff fd50 	bl	8003718 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c78:	4b2e      	ldr	r3, [pc, #184]	@ (8003d34 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003c7a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	461a      	mov	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d24d      	bcs.n	8003d24 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003c88:	f3ef 8311 	mrs	r3, BASEPRI
 8003c8c:	f04f 0120 	mov.w	r1, #32
 8003c90:	f381 8811 	msr	BASEPRI, r1
 8003c94:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d031      	beq.n	8003d00 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003c9c:	6979      	ldr	r1, [r7, #20]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	4413      	add	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	440b      	add	r3, r1
 8003caa:	3360      	adds	r3, #96	@ 0x60
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003cb0:	6979      	ldr	r1, [r7, #20]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	4413      	add	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	440b      	add	r3, r1
 8003cbe:	3364      	adds	r3, #100	@ 0x64
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003cc4:	6979      	ldr	r1, [r7, #20]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3368      	adds	r3, #104	@ 0x68
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003cd8:	6979      	ldr	r1, [r7, #20]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4413      	add	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	440b      	add	r3, r1
 8003ce6:	3370      	adds	r3, #112	@ 0x70
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003cec:	6979      	ldr	r1, [r7, #20]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	4413      	add	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	440b      	add	r3, r1
 8003cfa:	336c      	adds	r3, #108	@ 0x6c
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003d00:	6979      	ldr	r1, [r7, #20]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4613      	mov	r3, r2
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	4413      	add	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	440b      	add	r3, r1
 8003d0e:	3374      	adds	r3, #116	@ 0x74
 8003d10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d12:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d14:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	e002      	b.n	8003d2a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003d24:	f04f 33ff 	mov.w	r3, #4294967295
 8003d28:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20012ea4 	.word	0x20012ea4

08003d38 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003d48:	e002      	b.n	8003d50 <_EncodeStr+0x18>
    Len++;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4413      	add	r3, r2
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f6      	bne.n	8003d4a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d901      	bls.n	8003d68 <_EncodeStr+0x30>
    Len = Limit;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	2bfe      	cmp	r3, #254	@ 0xfe
 8003d6c:	d806      	bhi.n	8003d7c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	60fa      	str	r2, [r7, #12]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	e011      	b.n	8003da0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	60fa      	str	r2, [r7, #12]
 8003d82:	22ff      	movs	r2, #255	@ 0xff
 8003d84:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	60fa      	str	r2, [r7, #12]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	0a19      	lsrs	r1, r3, #8
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	60fa      	str	r2, [r7, #12]
 8003d9c:	b2ca      	uxtb	r2, r1
 8003d9e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003da4:	e00a      	b.n	8003dbc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	1c53      	adds	r3, r2, #1
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1c59      	adds	r1, r3, #1
 8003db0:	60f9      	str	r1, [r7, #12]
 8003db2:	7812      	ldrb	r2, [r2, #0]
 8003db4:	701a      	strb	r2, [r3, #0]
    n++;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	3301      	adds	r3, #1
 8003dba:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d3f0      	bcc.n	8003da6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3304      	adds	r3, #4
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003df2:	4b35      	ldr	r3, [pc, #212]	@ (8003ec8 <_HandleIncomingPacket+0xdc>)
 8003df4:	7e1b      	ldrb	r3, [r3, #24]
 8003df6:	4618      	mov	r0, r3
 8003df8:	1cfb      	adds	r3, r7, #3
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f7ff fdab 	bl	8003958 <SEGGER_RTT_ReadNoLock>
 8003e02:	4603      	mov	r3, r0
 8003e04:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	dd59      	ble.n	8003ec0 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	2b80      	cmp	r3, #128	@ 0x80
 8003e10:	d032      	beq.n	8003e78 <_HandleIncomingPacket+0x8c>
 8003e12:	2b80      	cmp	r3, #128	@ 0x80
 8003e14:	dc42      	bgt.n	8003e9c <_HandleIncomingPacket+0xb0>
 8003e16:	2b07      	cmp	r3, #7
 8003e18:	dc16      	bgt.n	8003e48 <_HandleIncomingPacket+0x5c>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	dd3e      	ble.n	8003e9c <_HandleIncomingPacket+0xb0>
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	2b06      	cmp	r3, #6
 8003e22:	d83b      	bhi.n	8003e9c <_HandleIncomingPacket+0xb0>
 8003e24:	a201      	add	r2, pc, #4	@ (adr r2, 8003e2c <_HandleIncomingPacket+0x40>)
 8003e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2a:	bf00      	nop
 8003e2c:	08003e4f 	.word	0x08003e4f
 8003e30:	08003e55 	.word	0x08003e55
 8003e34:	08003e5b 	.word	0x08003e5b
 8003e38:	08003e61 	.word	0x08003e61
 8003e3c:	08003e67 	.word	0x08003e67
 8003e40:	08003e6d 	.word	0x08003e6d
 8003e44:	08003e73 	.word	0x08003e73
 8003e48:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e4a:	d034      	beq.n	8003eb6 <_HandleIncomingPacket+0xca>
 8003e4c:	e026      	b.n	8003e9c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003e4e:	f000 fa9d 	bl	800438c <SEGGER_SYSVIEW_Start>
      break;
 8003e52:	e035      	b.n	8003ec0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003e54:	f000 fb54 	bl	8004500 <SEGGER_SYSVIEW_Stop>
      break;
 8003e58:	e032      	b.n	8003ec0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003e5a:	f000 fd2d 	bl	80048b8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003e5e:	e02f      	b.n	8003ec0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003e60:	f000 fcf2 	bl	8004848 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003e64:	e02c      	b.n	8003ec0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003e66:	f000 fb71 	bl	800454c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003e6a:	e029      	b.n	8003ec0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003e6c:	f000 ff50 	bl	8004d10 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003e70:	e026      	b.n	8003ec0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003e72:	f000 ff2f 	bl	8004cd4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003e76:	e023      	b.n	8003ec0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003e78:	4b13      	ldr	r3, [pc, #76]	@ (8003ec8 <_HandleIncomingPacket+0xdc>)
 8003e7a:	7e1b      	ldrb	r3, [r3, #24]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	1cfb      	adds	r3, r7, #3
 8003e80:	2201      	movs	r2, #1
 8003e82:	4619      	mov	r1, r3
 8003e84:	f7ff fd68 	bl	8003958 <SEGGER_RTT_ReadNoLock>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	dd13      	ble.n	8003eba <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fe9d 	bl	8004bd4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003e9a:	e00e      	b.n	8003eba <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	b25b      	sxtb	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	da0c      	bge.n	8003ebe <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003ea4:	4b08      	ldr	r3, [pc, #32]	@ (8003ec8 <_HandleIncomingPacket+0xdc>)
 8003ea6:	7e1b      	ldrb	r3, [r3, #24]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	1cfb      	adds	r3, r7, #3
 8003eac:	2201      	movs	r2, #1
 8003eae:	4619      	mov	r1, r3
 8003eb0:	f7ff fd52 	bl	8003958 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003eb4:	e003      	b.n	8003ebe <_HandleIncomingPacket+0xd2>
      break;
 8003eb6:	bf00      	nop
 8003eb8:	e002      	b.n	8003ec0 <_HandleIncomingPacket+0xd4>
      break;
 8003eba:	bf00      	nop
 8003ebc:	e000      	b.n	8003ec0 <_HandleIncomingPacket+0xd4>
      break;
 8003ebe:	bf00      	nop
    }
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20014364 	.word	0x20014364

08003ecc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08c      	sub	sp, #48	@ 0x30
 8003ed0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	3301      	adds	r3, #1
 8003eda:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ee0:	4b31      	ldr	r3, [pc, #196]	@ (8003fa8 <_TrySendOverflowPacket+0xdc>)
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ee6:	e00b      	b.n	8003f00 <_TrySendOverflowPacket+0x34>
 8003ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eee:	1c59      	adds	r1, r3, #1
 8003ef0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003ef2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]
 8003efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efc:	09db      	lsrs	r3, r3, #7
 8003efe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f02:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f04:	d8f0      	bhi.n	8003ee8 <_TrySendOverflowPacket+0x1c>
 8003f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f14:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f16:	4b25      	ldr	r3, [pc, #148]	@ (8003fac <_TrySendOverflowPacket+0xe0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003f1c:	4b22      	ldr	r3, [pc, #136]	@ (8003fa8 <_TrySendOverflowPacket+0xdc>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	623b      	str	r3, [r7, #32]
 8003f2e:	e00b      	b.n	8003f48 <_TrySendOverflowPacket+0x7c>
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	1c59      	adds	r1, r3, #1
 8003f38:	6279      	str	r1, [r7, #36]	@ 0x24
 8003f3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	09db      	lsrs	r3, r3, #7
 8003f46:	623b      	str	r3, [r7, #32]
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f4c:	d8f0      	bhi.n	8003f30 <_TrySendOverflowPacket+0x64>
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f54:	6a3a      	ldr	r2, [r7, #32]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003f5e:	4b12      	ldr	r3, [pc, #72]	@ (8003fa8 <_TrySendOverflowPacket+0xdc>)
 8003f60:	785b      	ldrb	r3, [r3, #1]
 8003f62:	4618      	mov	r0, r3
 8003f64:	1d3b      	adds	r3, r7, #4
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	1d3b      	adds	r3, r7, #4
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f7fc f92e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003f74:	4603      	mov	r3, r0
 8003f76:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa8 <_TrySendOverflowPacket+0xdc>)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003f84:	4b08      	ldr	r3, [pc, #32]	@ (8003fa8 <_TrySendOverflowPacket+0xdc>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <_TrySendOverflowPacket+0xdc>)
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	e004      	b.n	8003f9c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003f92:	4b05      	ldr	r3, [pc, #20]	@ (8003fa8 <_TrySendOverflowPacket+0xdc>)
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	3301      	adds	r3, #1
 8003f98:	4a03      	ldr	r2, [pc, #12]	@ (8003fa8 <_TrySendOverflowPacket+0xdc>)
 8003f9a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003f9c:	693b      	ldr	r3, [r7, #16]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3730      	adds	r7, #48	@ 0x30
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20014364 	.word	0x20014364
 8003fac:	e0001004 	.word	0xe0001004

08003fb0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	@ 0x28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003fbc:	4b6c      	ldr	r3, [pc, #432]	@ (8004170 <_SendPacket+0x1c0>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d010      	beq.n	8003fe6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8004170 <_SendPacket+0x1c0>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80a3 	beq.w	8004114 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003fce:	4b68      	ldr	r3, [pc, #416]	@ (8004170 <_SendPacket+0x1c0>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d109      	bne.n	8003fea <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003fd6:	f7ff ff79 	bl	8003ecc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003fda:	4b65      	ldr	r3, [pc, #404]	@ (8004170 <_SendPacket+0x1c0>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	f040 809a 	bne.w	8004118 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003fe4:	e001      	b.n	8003fea <_SendPacket+0x3a>
    goto Send;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <_SendPacket+0x3c>
Send:
 8003fea:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b1f      	cmp	r3, #31
 8003ff0:	d809      	bhi.n	8004006 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8004170 <_SendPacket+0x1c0>)
 8003ff4:	69da      	ldr	r2, [r3, #28]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	f040 808b 	bne.w	800411c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b17      	cmp	r3, #23
 800400a:	d807      	bhi.n	800401c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3b01      	subs	r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	b2da      	uxtb	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	701a      	strb	r2, [r3, #0]
 800401a:	e03d      	b.n	8004098 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	2b7f      	cmp	r3, #127	@ 0x7f
 8004028:	d912      	bls.n	8004050 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	09da      	lsrs	r2, r3, #7
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3b01      	subs	r3, #1
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	3a01      	subs	r2, #1
 8004042:	60fa      	str	r2, [r7, #12]
 8004044:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004048:	b2da      	uxtb	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	701a      	strb	r2, [r3, #0]
 800404e:	e006      	b.n	800405e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3b01      	subs	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b7f      	cmp	r3, #127	@ 0x7f
 8004062:	d912      	bls.n	800408a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	09da      	lsrs	r2, r3, #7
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	3b01      	subs	r3, #1
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	3a01      	subs	r2, #1
 800407c:	60fa      	str	r2, [r7, #12]
 800407e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004082:	b2da      	uxtb	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	e006      	b.n	8004098 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3b01      	subs	r3, #1
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	b2da      	uxtb	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004098:	4b36      	ldr	r3, [pc, #216]	@ (8004174 <_SendPacket+0x1c4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800409e:	4b34      	ldr	r3, [pc, #208]	@ (8004170 <_SendPacket+0x1c0>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	623b      	str	r3, [r7, #32]
 80040b0:	e00b      	b.n	80040ca <_SendPacket+0x11a>
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	1c59      	adds	r1, r3, #1
 80040ba:	6279      	str	r1, [r7, #36]	@ 0x24
 80040bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	09db      	lsrs	r3, r3, #7
 80040c8:	623b      	str	r3, [r7, #32]
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80040ce:	d8f0      	bhi.n	80040b2 <_SendPacket+0x102>
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80040d6:	6a3a      	ldr	r2, [r7, #32]
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	701a      	strb	r2, [r3, #0]
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80040e0:	4b23      	ldr	r3, [pc, #140]	@ (8004170 <_SendPacket+0x1c0>)
 80040e2:	785b      	ldrb	r3, [r3, #1]
 80040e4:	4618      	mov	r0, r3
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	68f9      	ldr	r1, [r7, #12]
 80040f0:	f7fc f86e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80040f4:	4603      	mov	r3, r0
 80040f6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80040fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004170 <_SendPacket+0x1c0>)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	60d3      	str	r3, [r2, #12]
 8004104:	e00b      	b.n	800411e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004106:	4b1a      	ldr	r3, [pc, #104]	@ (8004170 <_SendPacket+0x1c0>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	3301      	adds	r3, #1
 800410c:	b2da      	uxtb	r2, r3
 800410e:	4b18      	ldr	r3, [pc, #96]	@ (8004170 <_SendPacket+0x1c0>)
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	e004      	b.n	800411e <_SendPacket+0x16e>
    goto SendDone;
 8004114:	bf00      	nop
 8004116:	e002      	b.n	800411e <_SendPacket+0x16e>
      goto SendDone;
 8004118:	bf00      	nop
 800411a:	e000      	b.n	800411e <_SendPacket+0x16e>
      goto SendDone;
 800411c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800411e:	4b14      	ldr	r3, [pc, #80]	@ (8004170 <_SendPacket+0x1c0>)
 8004120:	7e1b      	ldrb	r3, [r3, #24]
 8004122:	4619      	mov	r1, r3
 8004124:	4a14      	ldr	r2, [pc, #80]	@ (8004178 <_SendPacket+0x1c8>)
 8004126:	460b      	mov	r3, r1
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	440b      	add	r3, r1
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4413      	add	r3, r2
 8004130:	336c      	adds	r3, #108	@ 0x6c
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	4b0e      	ldr	r3, [pc, #56]	@ (8004170 <_SendPacket+0x1c0>)
 8004136:	7e1b      	ldrb	r3, [r3, #24]
 8004138:	4618      	mov	r0, r3
 800413a:	490f      	ldr	r1, [pc, #60]	@ (8004178 <_SendPacket+0x1c8>)
 800413c:	4603      	mov	r3, r0
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	4403      	add	r3, r0
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	440b      	add	r3, r1
 8004146:	3370      	adds	r3, #112	@ 0x70
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d00b      	beq.n	8004166 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800414e:	4b08      	ldr	r3, [pc, #32]	@ (8004170 <_SendPacket+0x1c0>)
 8004150:	789b      	ldrb	r3, [r3, #2]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d107      	bne.n	8004166 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004156:	4b06      	ldr	r3, [pc, #24]	@ (8004170 <_SendPacket+0x1c0>)
 8004158:	2201      	movs	r2, #1
 800415a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800415c:	f7ff fe46 	bl	8003dec <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004160:	4b03      	ldr	r3, [pc, #12]	@ (8004170 <_SendPacket+0x1c0>)
 8004162:	2200      	movs	r2, #0
 8004164:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004166:	bf00      	nop
 8004168:	3728      	adds	r7, #40	@ 0x28
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20014364 	.word	0x20014364
 8004174:	e0001004 	.word	0xe0001004
 8004178:	20012ea4 	.word	0x20012ea4

0800417c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800418a:	2300      	movs	r3, #0
 800418c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004190:	4917      	ldr	r1, [pc, #92]	@ (80041f0 <SEGGER_SYSVIEW_Init+0x74>)
 8004192:	4818      	ldr	r0, [pc, #96]	@ (80041f4 <SEGGER_SYSVIEW_Init+0x78>)
 8004194:	f7ff fcdc 	bl	8003b50 <SEGGER_RTT_AllocUpBuffer>
 8004198:	4603      	mov	r3, r0
 800419a:	b2da      	uxtb	r2, r3
 800419c:	4b16      	ldr	r3, [pc, #88]	@ (80041f8 <SEGGER_SYSVIEW_Init+0x7c>)
 800419e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80041a0:	4b15      	ldr	r3, [pc, #84]	@ (80041f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80041a2:	785a      	ldrb	r2, [r3, #1]
 80041a4:	4b14      	ldr	r3, [pc, #80]	@ (80041f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80041a6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80041a8:	4b13      	ldr	r3, [pc, #76]	@ (80041f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80041aa:	7e1b      	ldrb	r3, [r3, #24]
 80041ac:	4618      	mov	r0, r3
 80041ae:	2300      	movs	r3, #0
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	2308      	movs	r3, #8
 80041b4:	4a11      	ldr	r2, [pc, #68]	@ (80041fc <SEGGER_SYSVIEW_Init+0x80>)
 80041b6:	490f      	ldr	r1, [pc, #60]	@ (80041f4 <SEGGER_SYSVIEW_Init+0x78>)
 80041b8:	f7ff fd4e 	bl	8003c58 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80041bc:	4b0e      	ldr	r3, [pc, #56]	@ (80041f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80041be:	2200      	movs	r2, #0
 80041c0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80041c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004200 <SEGGER_SYSVIEW_Init+0x84>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a0c      	ldr	r2, [pc, #48]	@ (80041f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80041c8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80041ca:	4a0b      	ldr	r2, [pc, #44]	@ (80041f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80041d0:	4a09      	ldr	r2, [pc, #36]	@ (80041f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80041d6:	4a08      	ldr	r2, [pc, #32]	@ (80041f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80041dc:	4a06      	ldr	r2, [pc, #24]	@ (80041f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80041e2:	4b05      	ldr	r3, [pc, #20]	@ (80041f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80041e8:	bf00      	nop
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	2001335c 	.word	0x2001335c
 80041f4:	08005900 	.word	0x08005900
 80041f8:	20014364 	.word	0x20014364
 80041fc:	2001435c 	.word	0x2001435c
 8004200:	e0001004 	.word	0xe0001004

08004204 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800420c:	4a04      	ldr	r2, [pc, #16]	@ (8004220 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6113      	str	r3, [r2, #16]
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20014364 	.word	0x20014364

08004224 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800422c:	f3ef 8311 	mrs	r3, BASEPRI
 8004230:	f04f 0120 	mov.w	r1, #32
 8004234:	f381 8811 	msr	BASEPRI, r1
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	4808      	ldr	r0, [pc, #32]	@ (800425c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800423c:	f7ff fdc9 	bl	8003dd2 <_PreparePacket>
 8004240:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	68b8      	ldr	r0, [r7, #8]
 8004248:	f7ff feb2 	bl	8003fb0 <_SendPacket>
  RECORD_END();
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f383 8811 	msr	BASEPRI, r3
}
 8004252:	bf00      	nop
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20014394 	.word	0x20014394

08004260 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800426a:	f3ef 8311 	mrs	r3, BASEPRI
 800426e:	f04f 0120 	mov.w	r1, #32
 8004272:	f381 8811 	msr	BASEPRI, r1
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	4816      	ldr	r0, [pc, #88]	@ (80042d4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800427a:	f7ff fdaa 	bl	8003dd2 <_PreparePacket>
 800427e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	61bb      	str	r3, [r7, #24]
 800428c:	e00b      	b.n	80042a6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	1c59      	adds	r1, r3, #1
 8004296:	61f9      	str	r1, [r7, #28]
 8004298:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	09db      	lsrs	r3, r3, #7
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80042aa:	d8f0      	bhi.n	800428e <SEGGER_SYSVIEW_RecordU32+0x2e>
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	61fa      	str	r2, [r7, #28]
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	68f9      	ldr	r1, [r7, #12]
 80042c0:	6938      	ldr	r0, [r7, #16]
 80042c2:	f7ff fe75 	bl	8003fb0 <_SendPacket>
  RECORD_END();
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f383 8811 	msr	BASEPRI, r3
}
 80042cc:	bf00      	nop
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	20014394 	.word	0x20014394

080042d8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08c      	sub	sp, #48	@ 0x30
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80042e4:	f3ef 8311 	mrs	r3, BASEPRI
 80042e8:	f04f 0120 	mov.w	r1, #32
 80042ec:	f381 8811 	msr	BASEPRI, r1
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	4825      	ldr	r0, [pc, #148]	@ (8004388 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80042f4:	f7ff fd6d 	bl	8003dd2 <_PreparePacket>
 80042f8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004306:	e00b      	b.n	8004320 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430a:	b2da      	uxtb	r2, r3
 800430c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800430e:	1c59      	adds	r1, r3, #1
 8004310:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004312:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431c:	09db      	lsrs	r3, r3, #7
 800431e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004322:	2b7f      	cmp	r3, #127	@ 0x7f
 8004324:	d8f0      	bhi.n	8004308 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800432c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004334:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	623b      	str	r3, [r7, #32]
 800433e:	e00b      	b.n	8004358 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	b2da      	uxtb	r2, r3
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	1c59      	adds	r1, r3, #1
 8004348:	6279      	str	r1, [r7, #36]	@ 0x24
 800434a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	09db      	lsrs	r3, r3, #7
 8004356:	623b      	str	r3, [r7, #32]
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	2b7f      	cmp	r3, #127	@ 0x7f
 800435c:	d8f0      	bhi.n	8004340 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	627a      	str	r2, [r7, #36]	@ 0x24
 8004364:	6a3a      	ldr	r2, [r7, #32]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	6979      	ldr	r1, [r7, #20]
 8004372:	69b8      	ldr	r0, [r7, #24]
 8004374:	f7ff fe1c 	bl	8003fb0 <_SendPacket>
  RECORD_END();
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f383 8811 	msr	BASEPRI, r3
}
 800437e:	bf00      	nop
 8004380:	3730      	adds	r7, #48	@ 0x30
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20014394 	.word	0x20014394

0800438c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800438c:	b580      	push	{r7, lr}
 800438e:	b08c      	sub	sp, #48	@ 0x30
 8004390:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004392:	4b58      	ldr	r3, [pc, #352]	@ (80044f4 <SEGGER_SYSVIEW_Start+0x168>)
 8004394:	2201      	movs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004398:	f3ef 8311 	mrs	r3, BASEPRI
 800439c:	f04f 0120 	mov.w	r1, #32
 80043a0:	f381 8811 	msr	BASEPRI, r1
 80043a4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80043a6:	4b53      	ldr	r3, [pc, #332]	@ (80044f4 <SEGGER_SYSVIEW_Start+0x168>)
 80043a8:	785b      	ldrb	r3, [r3, #1]
 80043aa:	220a      	movs	r2, #10
 80043ac:	4952      	ldr	r1, [pc, #328]	@ (80044f8 <SEGGER_SYSVIEW_Start+0x16c>)
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fb ff0e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80043ba:	200a      	movs	r0, #10
 80043bc:	f7ff ff32 	bl	8004224 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80043c0:	f3ef 8311 	mrs	r3, BASEPRI
 80043c4:	f04f 0120 	mov.w	r1, #32
 80043c8:	f381 8811 	msr	BASEPRI, r1
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	484b      	ldr	r0, [pc, #300]	@ (80044fc <SEGGER_SYSVIEW_Start+0x170>)
 80043d0:	f7ff fcff 	bl	8003dd2 <_PreparePacket>
 80043d4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043de:	4b45      	ldr	r3, [pc, #276]	@ (80044f4 <SEGGER_SYSVIEW_Start+0x168>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043e4:	e00b      	b.n	80043fe <SEGGER_SYSVIEW_Start+0x72>
 80043e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ec:	1c59      	adds	r1, r3, #1
 80043ee:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80043f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	701a      	strb	r2, [r3, #0]
 80043f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fa:	09db      	lsrs	r3, r3, #7
 80043fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004400:	2b7f      	cmp	r3, #127	@ 0x7f
 8004402:	d8f0      	bhi.n	80043e6 <SEGGER_SYSVIEW_Start+0x5a>
 8004404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800440a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004412:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	627b      	str	r3, [r7, #36]	@ 0x24
 8004418:	4b36      	ldr	r3, [pc, #216]	@ (80044f4 <SEGGER_SYSVIEW_Start+0x168>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	623b      	str	r3, [r7, #32]
 800441e:	e00b      	b.n	8004438 <SEGGER_SYSVIEW_Start+0xac>
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	b2da      	uxtb	r2, r3
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	1c59      	adds	r1, r3, #1
 8004428:	6279      	str	r1, [r7, #36]	@ 0x24
 800442a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	09db      	lsrs	r3, r3, #7
 8004436:	623b      	str	r3, [r7, #32]
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	2b7f      	cmp	r3, #127	@ 0x7f
 800443c:	d8f0      	bhi.n	8004420 <SEGGER_SYSVIEW_Start+0x94>
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	627a      	str	r2, [r7, #36]	@ 0x24
 8004444:	6a3a      	ldr	r2, [r7, #32]
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	4b28      	ldr	r3, [pc, #160]	@ (80044f4 <SEGGER_SYSVIEW_Start+0x168>)
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	e00b      	b.n	8004472 <SEGGER_SYSVIEW_Start+0xe6>
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	1c59      	adds	r1, r3, #1
 8004462:	61f9      	str	r1, [r7, #28]
 8004464:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	09db      	lsrs	r3, r3, #7
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b7f      	cmp	r3, #127	@ 0x7f
 8004476:	d8f0      	bhi.n	800445a <SEGGER_SYSVIEW_Start+0xce>
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	61fa      	str	r2, [r7, #28]
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	2300      	movs	r3, #0
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	e00b      	b.n	80044aa <SEGGER_SYSVIEW_Start+0x11e>
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	1c59      	adds	r1, r3, #1
 800449a:	6179      	str	r1, [r7, #20]
 800449c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	09db      	lsrs	r3, r3, #7
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80044ae:	d8f0      	bhi.n	8004492 <SEGGER_SYSVIEW_Start+0x106>
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	617a      	str	r2, [r7, #20]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80044c0:	2218      	movs	r2, #24
 80044c2:	6839      	ldr	r1, [r7, #0]
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff fd73 	bl	8003fb0 <_SendPacket>
      RECORD_END();
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80044d0:	4b08      	ldr	r3, [pc, #32]	@ (80044f4 <SEGGER_SYSVIEW_Start+0x168>)
 80044d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80044d8:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <SEGGER_SYSVIEW_Start+0x168>)
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80044de:	f000 f9eb 	bl	80048b8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80044e2:	f000 f9b1 	bl	8004848 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80044e6:	f000 fc13 	bl	8004d10 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80044ea:	bf00      	nop
 80044ec:	3730      	adds	r7, #48	@ 0x30
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20014364 	.word	0x20014364
 80044f8:	0800592c 	.word	0x0800592c
 80044fc:	20014394 	.word	0x20014394

08004500 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004506:	f3ef 8311 	mrs	r3, BASEPRI
 800450a:	f04f 0120 	mov.w	r1, #32
 800450e:	f381 8811 	msr	BASEPRI, r1
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	480b      	ldr	r0, [pc, #44]	@ (8004544 <SEGGER_SYSVIEW_Stop+0x44>)
 8004516:	f7ff fc5c 	bl	8003dd2 <_PreparePacket>
 800451a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800451c:	4b0a      	ldr	r3, [pc, #40]	@ (8004548 <SEGGER_SYSVIEW_Stop+0x48>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004524:	220b      	movs	r2, #11
 8004526:	6839      	ldr	r1, [r7, #0]
 8004528:	6838      	ldr	r0, [r7, #0]
 800452a:	f7ff fd41 	bl	8003fb0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800452e:	4b06      	ldr	r3, [pc, #24]	@ (8004548 <SEGGER_SYSVIEW_Stop+0x48>)
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f383 8811 	msr	BASEPRI, r3
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20014394 	.word	0x20014394
 8004548:	20014364 	.word	0x20014364

0800454c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b08c      	sub	sp, #48	@ 0x30
 8004550:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004552:	f3ef 8311 	mrs	r3, BASEPRI
 8004556:	f04f 0120 	mov.w	r1, #32
 800455a:	f381 8811 	msr	BASEPRI, r1
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	4845      	ldr	r0, [pc, #276]	@ (8004678 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004562:	f7ff fc36 	bl	8003dd2 <_PreparePacket>
 8004566:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004570:	4b42      	ldr	r3, [pc, #264]	@ (800467c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004576:	e00b      	b.n	8004590 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457a:	b2da      	uxtb	r2, r3
 800457c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800457e:	1c59      	adds	r1, r3, #1
 8004580:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004582:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458c:	09db      	lsrs	r3, r3, #7
 800458e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004592:	2b7f      	cmp	r3, #127	@ 0x7f
 8004594:	d8f0      	bhi.n	8004578 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800459c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045aa:	4b34      	ldr	r3, [pc, #208]	@ (800467c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	623b      	str	r3, [r7, #32]
 80045b0:	e00b      	b.n	80045ca <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	1c59      	adds	r1, r3, #1
 80045ba:	6279      	str	r1, [r7, #36]	@ 0x24
 80045bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	09db      	lsrs	r3, r3, #7
 80045c8:	623b      	str	r3, [r7, #32]
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80045ce:	d8f0      	bhi.n	80045b2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80045d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80045d6:	6a3a      	ldr	r2, [r7, #32]
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]
 80045dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	61fb      	str	r3, [r7, #28]
 80045e4:	4b25      	ldr	r3, [pc, #148]	@ (800467c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	e00b      	b.n	8004604 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	1c59      	adds	r1, r3, #1
 80045f4:	61f9      	str	r1, [r7, #28]
 80045f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	09db      	lsrs	r3, r3, #7
 8004602:	61bb      	str	r3, [r7, #24]
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b7f      	cmp	r3, #127	@ 0x7f
 8004608:	d8f0      	bhi.n	80045ec <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	61fa      	str	r2, [r7, #28]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	e00b      	b.n	800463c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	b2da      	uxtb	r2, r3
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	1c59      	adds	r1, r3, #1
 800462c:	6179      	str	r1, [r7, #20]
 800462e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	09db      	lsrs	r3, r3, #7
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004640:	d8f0      	bhi.n	8004624 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	617a      	str	r2, [r7, #20]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004652:	2218      	movs	r2, #24
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	68b8      	ldr	r0, [r7, #8]
 8004658:	f7ff fcaa 	bl	8003fb0 <_SendPacket>
  RECORD_END();
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004662:	4b06      	ldr	r3, [pc, #24]	@ (800467c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800466a:	4b04      	ldr	r3, [pc, #16]	@ (800467c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	4798      	blx	r3
  }
}
 8004670:	bf00      	nop
 8004672:	3730      	adds	r7, #48	@ 0x30
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20014394 	.word	0x20014394
 800467c:	20014364 	.word	0x20014364

08004680 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b092      	sub	sp, #72	@ 0x48
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004688:	f3ef 8311 	mrs	r3, BASEPRI
 800468c:	f04f 0120 	mov.w	r1, #32
 8004690:	f381 8811 	msr	BASEPRI, r1
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	486a      	ldr	r0, [pc, #424]	@ (8004840 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004698:	f7ff fb9b 	bl	8003dd2 <_PreparePacket>
 800469c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4b66      	ldr	r3, [pc, #408]	@ (8004844 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80046b2:	e00b      	b.n	80046cc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80046b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ba:	1c59      	adds	r1, r3, #1
 80046bc:	6479      	str	r1, [r7, #68]	@ 0x44
 80046be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046c8:	09db      	lsrs	r3, r3, #7
 80046ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80046cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80046d0:	d8f0      	bhi.n	80046b4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80046d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80046d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046ec:	e00b      	b.n	8004706 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80046ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046f4:	1c59      	adds	r1, r3, #1
 80046f6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80046f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]
 8004700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004702:	09db      	lsrs	r3, r3, #7
 8004704:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004708:	2b7f      	cmp	r3, #127	@ 0x7f
 800470a:	d8f0      	bhi.n	80046ee <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800470c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004712:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800471a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	4619      	mov	r1, r3
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f7ff fb07 	bl	8003d38 <_EncodeStr>
 800472a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800472c:	2209      	movs	r2, #9
 800472e:	68f9      	ldr	r1, [r7, #12]
 8004730:	6938      	ldr	r0, [r7, #16]
 8004732:	f7ff fc3d 	bl	8003fb0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	637b      	str	r3, [r7, #52]	@ 0x34
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	4b40      	ldr	r3, [pc, #256]	@ (8004844 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	633b      	str	r3, [r7, #48]	@ 0x30
 800474a:	e00b      	b.n	8004764 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800474c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474e:	b2da      	uxtb	r2, r3
 8004750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004752:	1c59      	adds	r1, r3, #1
 8004754:	6379      	str	r1, [r7, #52]	@ 0x34
 8004756:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004760:	09db      	lsrs	r3, r3, #7
 8004762:	633b      	str	r3, [r7, #48]	@ 0x30
 8004764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004766:	2b7f      	cmp	r3, #127	@ 0x7f
 8004768:	d8f0      	bhi.n	800474c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800476a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004778:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004784:	e00b      	b.n	800479e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004788:	b2da      	uxtb	r2, r3
 800478a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478c:	1c59      	adds	r1, r3, #1
 800478e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004790:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	701a      	strb	r2, [r3, #0]
 8004798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479a:	09db      	lsrs	r3, r3, #7
 800479c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800479e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80047a2:	d8f0      	bhi.n	8004786 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80047a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	701a      	strb	r2, [r3, #0]
 80047b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	623b      	str	r3, [r7, #32]
 80047be:	e00b      	b.n	80047d8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c6:	1c59      	adds	r1, r3, #1
 80047c8:	6279      	str	r1, [r7, #36]	@ 0x24
 80047ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	09db      	lsrs	r3, r3, #7
 80047d6:	623b      	str	r3, [r7, #32]
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	2b7f      	cmp	r3, #127	@ 0x7f
 80047dc:	d8f0      	bhi.n	80047c0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80047e4:	6a3a      	ldr	r2, [r7, #32]
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	2300      	movs	r3, #0
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	e00b      	b.n	8004810 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	1c59      	adds	r1, r3, #1
 8004800:	61f9      	str	r1, [r7, #28]
 8004802:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	09db      	lsrs	r3, r3, #7
 800480e:	61bb      	str	r3, [r7, #24]
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b7f      	cmp	r3, #127	@ 0x7f
 8004814:	d8f0      	bhi.n	80047f8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	61fa      	str	r2, [r7, #28]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004826:	2215      	movs	r2, #21
 8004828:	68f9      	ldr	r1, [r7, #12]
 800482a:	6938      	ldr	r0, [r7, #16]
 800482c:	f7ff fbc0 	bl	8003fb0 <_SendPacket>
  RECORD_END();
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f383 8811 	msr	BASEPRI, r3
}
 8004836:	bf00      	nop
 8004838:	3748      	adds	r7, #72	@ 0x48
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20014394 	.word	0x20014394
 8004844:	20014364 	.word	0x20014364

08004848 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800484c:	4b07      	ldr	r3, [pc, #28]	@ (800486c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004854:	4b05      	ldr	r3, [pc, #20]	@ (800486c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800485e:	4b03      	ldr	r3, [pc, #12]	@ (800486c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	4798      	blx	r3
  }
}
 8004866:	bf00      	nop
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20014364 	.word	0x20014364

08004870 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004878:	f3ef 8311 	mrs	r3, BASEPRI
 800487c:	f04f 0120 	mov.w	r1, #32
 8004880:	f381 8811 	msr	BASEPRI, r1
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	480b      	ldr	r0, [pc, #44]	@ (80048b4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004888:	f7ff faa3 	bl	8003dd2 <_PreparePacket>
 800488c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800488e:	2280      	movs	r2, #128	@ 0x80
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	6938      	ldr	r0, [r7, #16]
 8004894:	f7ff fa50 	bl	8003d38 <_EncodeStr>
 8004898:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800489a:	220e      	movs	r2, #14
 800489c:	68f9      	ldr	r1, [r7, #12]
 800489e:	6938      	ldr	r0, [r7, #16]
 80048a0:	f7ff fb86 	bl	8003fb0 <_SendPacket>
  RECORD_END();
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f383 8811 	msr	BASEPRI, r3
}
 80048aa:	bf00      	nop
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20014394 	.word	0x20014394

080048b8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80048b8:	b590      	push	{r4, r7, lr}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80048be:	4b15      	ldr	r3, [pc, #84]	@ (8004914 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01a      	beq.n	80048fc <SEGGER_SYSVIEW_RecordSystime+0x44>
 80048c6:	4b13      	ldr	r3, [pc, #76]	@ (8004914 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d015      	beq.n	80048fc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80048d0:	4b10      	ldr	r3, [pc, #64]	@ (8004914 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4798      	blx	r3
 80048d8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80048dc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80048de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	000a      	movs	r2, r1
 80048ec:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80048ee:	4613      	mov	r3, r2
 80048f0:	461a      	mov	r2, r3
 80048f2:	4621      	mov	r1, r4
 80048f4:	200d      	movs	r0, #13
 80048f6:	f7ff fcef 	bl	80042d8 <SEGGER_SYSVIEW_RecordU32x2>
 80048fa:	e006      	b.n	800490a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80048fc:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4619      	mov	r1, r3
 8004902:	200c      	movs	r0, #12
 8004904:	f7ff fcac 	bl	8004260 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004908:	bf00      	nop
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	bd90      	pop	{r4, r7, pc}
 8004912:	bf00      	nop
 8004914:	20014364 	.word	0x20014364
 8004918:	e0001004 	.word	0xe0001004

0800491c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004922:	f3ef 8311 	mrs	r3, BASEPRI
 8004926:	f04f 0120 	mov.w	r1, #32
 800492a:	f381 8811 	msr	BASEPRI, r1
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	4819      	ldr	r0, [pc, #100]	@ (8004998 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004932:	f7ff fa4e 	bl	8003dd2 <_PreparePacket>
 8004936:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800493c:	4b17      	ldr	r3, [pc, #92]	@ (800499c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004944:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	e00b      	b.n	8004968 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	b2da      	uxtb	r2, r3
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	1c59      	adds	r1, r3, #1
 8004958:	6179      	str	r1, [r7, #20]
 800495a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	09db      	lsrs	r3, r3, #7
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2b7f      	cmp	r3, #127	@ 0x7f
 800496c:	d8f0      	bhi.n	8004950 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	617a      	str	r2, [r7, #20]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800497e:	2202      	movs	r2, #2
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	68b8      	ldr	r0, [r7, #8]
 8004984:	f7ff fb14 	bl	8003fb0 <_SendPacket>
  RECORD_END();
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f383 8811 	msr	BASEPRI, r3
}
 800498e:	bf00      	nop
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20014394 	.word	0x20014394
 800499c:	e000ed04 	.word	0xe000ed04

080049a0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80049a6:	f3ef 8311 	mrs	r3, BASEPRI
 80049aa:	f04f 0120 	mov.w	r1, #32
 80049ae:	f381 8811 	msr	BASEPRI, r1
 80049b2:	607b      	str	r3, [r7, #4]
 80049b4:	4807      	ldr	r0, [pc, #28]	@ (80049d4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80049b6:	f7ff fa0c 	bl	8003dd2 <_PreparePacket>
 80049ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80049bc:	2203      	movs	r2, #3
 80049be:	6839      	ldr	r1, [r7, #0]
 80049c0:	6838      	ldr	r0, [r7, #0]
 80049c2:	f7ff faf5 	bl	8003fb0 <_SendPacket>
  RECORD_END();
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f383 8811 	msr	BASEPRI, r3
}
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20014394 	.word	0x20014394

080049d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80049de:	f3ef 8311 	mrs	r3, BASEPRI
 80049e2:	f04f 0120 	mov.w	r1, #32
 80049e6:	f381 8811 	msr	BASEPRI, r1
 80049ea:	607b      	str	r3, [r7, #4]
 80049ec:	4807      	ldr	r0, [pc, #28]	@ (8004a0c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80049ee:	f7ff f9f0 	bl	8003dd2 <_PreparePacket>
 80049f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80049f4:	2212      	movs	r2, #18
 80049f6:	6839      	ldr	r1, [r7, #0]
 80049f8:	6838      	ldr	r0, [r7, #0]
 80049fa:	f7ff fad9 	bl	8003fb0 <_SendPacket>
  RECORD_END();
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f383 8811 	msr	BASEPRI, r3
}
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20014394 	.word	0x20014394

08004a10 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a16:	f3ef 8311 	mrs	r3, BASEPRI
 8004a1a:	f04f 0120 	mov.w	r1, #32
 8004a1e:	f381 8811 	msr	BASEPRI, r1
 8004a22:	607b      	str	r3, [r7, #4]
 8004a24:	4807      	ldr	r0, [pc, #28]	@ (8004a44 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004a26:	f7ff f9d4 	bl	8003dd2 <_PreparePacket>
 8004a2a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004a2c:	2211      	movs	r2, #17
 8004a2e:	6839      	ldr	r1, [r7, #0]
 8004a30:	6838      	ldr	r0, [r7, #0]
 8004a32:	f7ff fabd 	bl	8003fb0 <_SendPacket>
  RECORD_END();
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f383 8811 	msr	BASEPRI, r3
}
 8004a3c:	bf00      	nop
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20014394 	.word	0x20014394

08004a48 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a50:	f3ef 8311 	mrs	r3, BASEPRI
 8004a54:	f04f 0120 	mov.w	r1, #32
 8004a58:	f381 8811 	msr	BASEPRI, r1
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	4819      	ldr	r0, [pc, #100]	@ (8004ac4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004a60:	f7ff f9b7 	bl	8003dd2 <_PreparePacket>
 8004a64:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004a6a:	4b17      	ldr	r3, [pc, #92]	@ (8004ac8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	e00b      	b.n	8004a96 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	1c59      	adds	r1, r3, #1
 8004a86:	61f9      	str	r1, [r7, #28]
 8004a88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	09db      	lsrs	r3, r3, #7
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a9a:	d8f0      	bhi.n	8004a7e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	61fa      	str	r2, [r7, #28]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	701a      	strb	r2, [r3, #0]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004aac:	2208      	movs	r2, #8
 8004aae:	68f9      	ldr	r1, [r7, #12]
 8004ab0:	6938      	ldr	r0, [r7, #16]
 8004ab2:	f7ff fa7d 	bl	8003fb0 <_SendPacket>
  RECORD_END();
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f383 8811 	msr	BASEPRI, r3
}
 8004abc:	bf00      	nop
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	20014394 	.word	0x20014394
 8004ac8:	20014364 	.word	0x20014364

08004acc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ad4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ad8:	f04f 0120 	mov.w	r1, #32
 8004adc:	f381 8811 	msr	BASEPRI, r1
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	4819      	ldr	r0, [pc, #100]	@ (8004b48 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004ae4:	f7ff f975 	bl	8003dd2 <_PreparePacket>
 8004ae8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004aee:	4b17      	ldr	r3, [pc, #92]	@ (8004b4c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	61bb      	str	r3, [r7, #24]
 8004b00:	e00b      	b.n	8004b1a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	1c59      	adds	r1, r3, #1
 8004b0a:	61f9      	str	r1, [r7, #28]
 8004b0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	09db      	lsrs	r3, r3, #7
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b1e:	d8f0      	bhi.n	8004b02 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	61fa      	str	r2, [r7, #28]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004b30:	2204      	movs	r2, #4
 8004b32:	68f9      	ldr	r1, [r7, #12]
 8004b34:	6938      	ldr	r0, [r7, #16]
 8004b36:	f7ff fa3b 	bl	8003fb0 <_SendPacket>
  RECORD_END();
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f383 8811 	msr	BASEPRI, r3
}
 8004b40:	bf00      	nop
 8004b42:	3720      	adds	r7, #32
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20014394 	.word	0x20014394
 8004b4c:	20014364 	.word	0x20014364

08004b50 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b58:	f3ef 8311 	mrs	r3, BASEPRI
 8004b5c:	f04f 0120 	mov.w	r1, #32
 8004b60:	f381 8811 	msr	BASEPRI, r1
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	4819      	ldr	r0, [pc, #100]	@ (8004bcc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004b68:	f7ff f933 	bl	8003dd2 <_PreparePacket>
 8004b6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004b72:	4b17      	ldr	r3, [pc, #92]	@ (8004bd0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	61fb      	str	r3, [r7, #28]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	e00b      	b.n	8004b9e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	1c59      	adds	r1, r3, #1
 8004b8e:	61f9      	str	r1, [r7, #28]
 8004b90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	09db      	lsrs	r3, r3, #7
 8004b9c:	61bb      	str	r3, [r7, #24]
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ba2:	d8f0      	bhi.n	8004b86 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	61fa      	str	r2, [r7, #28]
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004bb4:	2206      	movs	r2, #6
 8004bb6:	68f9      	ldr	r1, [r7, #12]
 8004bb8:	6938      	ldr	r0, [r7, #16]
 8004bba:	f7ff f9f9 	bl	8003fb0 <_SendPacket>
  RECORD_END();
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f383 8811 	msr	BASEPRI, r3
}
 8004bc4:	bf00      	nop
 8004bc6:	3720      	adds	r7, #32
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20014394 	.word	0x20014394
 8004bd0:	20014364 	.word	0x20014364

08004bd4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08c      	sub	sp, #48	@ 0x30
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004bde:	4b3b      	ldr	r3, [pc, #236]	@ (8004ccc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d06d      	beq.n	8004cc2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004be6:	4b39      	ldr	r3, [pc, #228]	@ (8004ccc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004bec:	2300      	movs	r3, #0
 8004bee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bf0:	e008      	b.n	8004c04 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8004bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c00:	3301      	adds	r3, #1
 8004c02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d3f2      	bcc.n	8004bf2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004c0c:	e000      	b.n	8004c10 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004c0e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d055      	beq.n	8004cc2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c16:	f3ef 8311 	mrs	r3, BASEPRI
 8004c1a:	f04f 0120 	mov.w	r1, #32
 8004c1e:	f381 8811 	msr	BASEPRI, r1
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	482a      	ldr	r0, [pc, #168]	@ (8004cd0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004c26:	f7ff f8d4 	bl	8003dd2 <_PreparePacket>
 8004c2a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	623b      	str	r3, [r7, #32]
 8004c38:	e00b      	b.n	8004c52 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	1c59      	adds	r1, r3, #1
 8004c42:	6279      	str	r1, [r7, #36]	@ 0x24
 8004c44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	09db      	lsrs	r3, r3, #7
 8004c50:	623b      	str	r3, [r7, #32]
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c56:	d8f0      	bhi.n	8004c3a <SEGGER_SYSVIEW_SendModule+0x66>
 8004c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c5e:	6a3a      	ldr	r2, [r7, #32]
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c66:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	61fb      	str	r3, [r7, #28]
 8004c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	e00b      	b.n	8004c8c <SEGGER_SYSVIEW_SendModule+0xb8>
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	1c59      	adds	r1, r3, #1
 8004c7c:	61f9      	str	r1, [r7, #28]
 8004c7e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	09db      	lsrs	r3, r3, #7
 8004c8a:	61bb      	str	r3, [r7, #24]
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c90:	d8f0      	bhi.n	8004c74 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	61fa      	str	r2, [r7, #28]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2280      	movs	r2, #128	@ 0x80
 8004ca8:	4619      	mov	r1, r3
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f7ff f844 	bl	8003d38 <_EncodeStr>
 8004cb0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004cb2:	2216      	movs	r2, #22
 8004cb4:	68f9      	ldr	r1, [r7, #12]
 8004cb6:	6938      	ldr	r0, [r7, #16]
 8004cb8:	f7ff f97a 	bl	8003fb0 <_SendPacket>
      RECORD_END();
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004cc2:	bf00      	nop
 8004cc4:	3730      	adds	r7, #48	@ 0x30
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	2001438c 	.word	0x2001438c
 8004cd0:	20014394 	.word	0x20014394

08004cd4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004cda:	4b0c      	ldr	r3, [pc, #48]	@ (8004d0c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00f      	beq.n	8004d02 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8004d0c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f2      	bne.n	8004ce8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	2001438c 	.word	0x2001438c

08004d10 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004d16:	f3ef 8311 	mrs	r3, BASEPRI
 8004d1a:	f04f 0120 	mov.w	r1, #32
 8004d1e:	f381 8811 	msr	BASEPRI, r1
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	4817      	ldr	r0, [pc, #92]	@ (8004d84 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004d26:	f7ff f854 	bl	8003dd2 <_PreparePacket>
 8004d2a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	4b14      	ldr	r3, [pc, #80]	@ (8004d88 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	e00b      	b.n	8004d54 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	1c59      	adds	r1, r3, #1
 8004d44:	6179      	str	r1, [r7, #20]
 8004d46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	09db      	lsrs	r3, r3, #7
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d58:	d8f0      	bhi.n	8004d3c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	617a      	str	r2, [r7, #20]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004d6a:	221b      	movs	r2, #27
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	68b8      	ldr	r0, [r7, #8]
 8004d70:	f7ff f91e 	bl	8003fb0 <_SendPacket>
  RECORD_END();
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f383 8811 	msr	BASEPRI, r3
}
 8004d7a:	bf00      	nop
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20014394 	.word	0x20014394
 8004d88:	20014390 	.word	0x20014390

08004d8c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	@ 0x28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d94:	f3ef 8311 	mrs	r3, BASEPRI
 8004d98:	f04f 0120 	mov.w	r1, #32
 8004d9c:	f381 8811 	msr	BASEPRI, r1
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	4827      	ldr	r0, [pc, #156]	@ (8004e40 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004da4:	f7ff f815 	bl	8003dd2 <_PreparePacket>
 8004da8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004daa:	2280      	movs	r2, #128	@ 0x80
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	6938      	ldr	r0, [r7, #16]
 8004db0:	f7fe ffc2 	bl	8003d38 <_EncodeStr>
 8004db4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dba:	2301      	movs	r3, #1
 8004dbc:	623b      	str	r3, [r7, #32]
 8004dbe:	e00b      	b.n	8004dd8 <SEGGER_SYSVIEW_Warn+0x4c>
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc6:	1c59      	adds	r1, r3, #1
 8004dc8:	6279      	str	r1, [r7, #36]	@ 0x24
 8004dca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	09db      	lsrs	r3, r3, #7
 8004dd6:	623b      	str	r3, [r7, #32]
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ddc:	d8f0      	bhi.n	8004dc0 <SEGGER_SYSVIEW_Warn+0x34>
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	627a      	str	r2, [r7, #36]	@ 0x24
 8004de4:	6a3a      	ldr	r2, [r7, #32]
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	61fb      	str	r3, [r7, #28]
 8004df2:	2300      	movs	r3, #0
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	e00b      	b.n	8004e10 <SEGGER_SYSVIEW_Warn+0x84>
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	1c59      	adds	r1, r3, #1
 8004e00:	61f9      	str	r1, [r7, #28]
 8004e02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	09db      	lsrs	r3, r3, #7
 8004e0e:	61bb      	str	r3, [r7, #24]
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e14:	d8f0      	bhi.n	8004df8 <SEGGER_SYSVIEW_Warn+0x6c>
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	61fa      	str	r2, [r7, #28]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004e26:	221a      	movs	r2, #26
 8004e28:	68f9      	ldr	r1, [r7, #12]
 8004e2a:	6938      	ldr	r0, [r7, #16]
 8004e2c:	f7ff f8c0 	bl	8003fb0 <_SendPacket>
  RECORD_END();
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f383 8811 	msr	BASEPRI, r3
}
 8004e36:	bf00      	nop
 8004e38:	3728      	adds	r7, #40	@ 0x28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20014394 	.word	0x20014394

08004e44 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	2000      	movs	r0, #0
 8004e58:	f7fe fe54 	bl	8003b04 <SEGGER_RTT_Write>
  return len;
 8004e5c:	683b      	ldr	r3, [r7, #0]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <std>:
 8004e68:	2300      	movs	r3, #0
 8004e6a:	b510      	push	{r4, lr}
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e76:	6083      	str	r3, [r0, #8]
 8004e78:	8181      	strh	r1, [r0, #12]
 8004e7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e7c:	81c2      	strh	r2, [r0, #14]
 8004e7e:	6183      	str	r3, [r0, #24]
 8004e80:	4619      	mov	r1, r3
 8004e82:	2208      	movs	r2, #8
 8004e84:	305c      	adds	r0, #92	@ 0x5c
 8004e86:	f000 f9f7 	bl	8005278 <memset>
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec0 <std+0x58>)
 8004e8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <std+0x5c>)
 8004e90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec8 <std+0x60>)
 8004e94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e96:	4b0d      	ldr	r3, [pc, #52]	@ (8004ecc <std+0x64>)
 8004e98:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed0 <std+0x68>)
 8004e9c:	6224      	str	r4, [r4, #32]
 8004e9e:	429c      	cmp	r4, r3
 8004ea0:	d006      	beq.n	8004eb0 <std+0x48>
 8004ea2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ea6:	4294      	cmp	r4, r2
 8004ea8:	d002      	beq.n	8004eb0 <std+0x48>
 8004eaa:	33d0      	adds	r3, #208	@ 0xd0
 8004eac:	429c      	cmp	r4, r3
 8004eae:	d105      	bne.n	8004ebc <std+0x54>
 8004eb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eb8:	f000 ba3e 	b.w	8005338 <__retarget_lock_init_recursive>
 8004ebc:	bd10      	pop	{r4, pc}
 8004ebe:	bf00      	nop
 8004ec0:	080050a9 	.word	0x080050a9
 8004ec4:	080050cb 	.word	0x080050cb
 8004ec8:	08005103 	.word	0x08005103
 8004ecc:	08005127 	.word	0x08005127
 8004ed0:	20014478 	.word	0x20014478

08004ed4 <stdio_exit_handler>:
 8004ed4:	4a02      	ldr	r2, [pc, #8]	@ (8004ee0 <stdio_exit_handler+0xc>)
 8004ed6:	4903      	ldr	r1, [pc, #12]	@ (8004ee4 <stdio_exit_handler+0x10>)
 8004ed8:	4803      	ldr	r0, [pc, #12]	@ (8004ee8 <stdio_exit_handler+0x14>)
 8004eda:	f000 b869 	b.w	8004fb0 <_fwalk_sglue>
 8004ede:	bf00      	nop
 8004ee0:	20000010 	.word	0x20000010
 8004ee4:	08005655 	.word	0x08005655
 8004ee8:	20000020 	.word	0x20000020

08004eec <cleanup_stdio>:
 8004eec:	6841      	ldr	r1, [r0, #4]
 8004eee:	4b0c      	ldr	r3, [pc, #48]	@ (8004f20 <cleanup_stdio+0x34>)
 8004ef0:	4299      	cmp	r1, r3
 8004ef2:	b510      	push	{r4, lr}
 8004ef4:	4604      	mov	r4, r0
 8004ef6:	d001      	beq.n	8004efc <cleanup_stdio+0x10>
 8004ef8:	f000 fbac 	bl	8005654 <_fflush_r>
 8004efc:	68a1      	ldr	r1, [r4, #8]
 8004efe:	4b09      	ldr	r3, [pc, #36]	@ (8004f24 <cleanup_stdio+0x38>)
 8004f00:	4299      	cmp	r1, r3
 8004f02:	d002      	beq.n	8004f0a <cleanup_stdio+0x1e>
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 fba5 	bl	8005654 <_fflush_r>
 8004f0a:	68e1      	ldr	r1, [r4, #12]
 8004f0c:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <cleanup_stdio+0x3c>)
 8004f0e:	4299      	cmp	r1, r3
 8004f10:	d004      	beq.n	8004f1c <cleanup_stdio+0x30>
 8004f12:	4620      	mov	r0, r4
 8004f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f18:	f000 bb9c 	b.w	8005654 <_fflush_r>
 8004f1c:	bd10      	pop	{r4, pc}
 8004f1e:	bf00      	nop
 8004f20:	20014478 	.word	0x20014478
 8004f24:	200144e0 	.word	0x200144e0
 8004f28:	20014548 	.word	0x20014548

08004f2c <global_stdio_init.part.0>:
 8004f2c:	b510      	push	{r4, lr}
 8004f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f5c <global_stdio_init.part.0+0x30>)
 8004f30:	4c0b      	ldr	r4, [pc, #44]	@ (8004f60 <global_stdio_init.part.0+0x34>)
 8004f32:	4a0c      	ldr	r2, [pc, #48]	@ (8004f64 <global_stdio_init.part.0+0x38>)
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	4620      	mov	r0, r4
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2104      	movs	r1, #4
 8004f3c:	f7ff ff94 	bl	8004e68 <std>
 8004f40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f44:	2201      	movs	r2, #1
 8004f46:	2109      	movs	r1, #9
 8004f48:	f7ff ff8e 	bl	8004e68 <std>
 8004f4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f50:	2202      	movs	r2, #2
 8004f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f56:	2112      	movs	r1, #18
 8004f58:	f7ff bf86 	b.w	8004e68 <std>
 8004f5c:	200145b0 	.word	0x200145b0
 8004f60:	20014478 	.word	0x20014478
 8004f64:	08004ed5 	.word	0x08004ed5

08004f68 <__sfp_lock_acquire>:
 8004f68:	4801      	ldr	r0, [pc, #4]	@ (8004f70 <__sfp_lock_acquire+0x8>)
 8004f6a:	f000 b9e6 	b.w	800533a <__retarget_lock_acquire_recursive>
 8004f6e:	bf00      	nop
 8004f70:	200145b9 	.word	0x200145b9

08004f74 <__sfp_lock_release>:
 8004f74:	4801      	ldr	r0, [pc, #4]	@ (8004f7c <__sfp_lock_release+0x8>)
 8004f76:	f000 b9e1 	b.w	800533c <__retarget_lock_release_recursive>
 8004f7a:	bf00      	nop
 8004f7c:	200145b9 	.word	0x200145b9

08004f80 <__sinit>:
 8004f80:	b510      	push	{r4, lr}
 8004f82:	4604      	mov	r4, r0
 8004f84:	f7ff fff0 	bl	8004f68 <__sfp_lock_acquire>
 8004f88:	6a23      	ldr	r3, [r4, #32]
 8004f8a:	b11b      	cbz	r3, 8004f94 <__sinit+0x14>
 8004f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f90:	f7ff bff0 	b.w	8004f74 <__sfp_lock_release>
 8004f94:	4b04      	ldr	r3, [pc, #16]	@ (8004fa8 <__sinit+0x28>)
 8004f96:	6223      	str	r3, [r4, #32]
 8004f98:	4b04      	ldr	r3, [pc, #16]	@ (8004fac <__sinit+0x2c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1f5      	bne.n	8004f8c <__sinit+0xc>
 8004fa0:	f7ff ffc4 	bl	8004f2c <global_stdio_init.part.0>
 8004fa4:	e7f2      	b.n	8004f8c <__sinit+0xc>
 8004fa6:	bf00      	nop
 8004fa8:	08004eed 	.word	0x08004eed
 8004fac:	200145b0 	.word	0x200145b0

08004fb0 <_fwalk_sglue>:
 8004fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	4688      	mov	r8, r1
 8004fb8:	4614      	mov	r4, r2
 8004fba:	2600      	movs	r6, #0
 8004fbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fc0:	f1b9 0901 	subs.w	r9, r9, #1
 8004fc4:	d505      	bpl.n	8004fd2 <_fwalk_sglue+0x22>
 8004fc6:	6824      	ldr	r4, [r4, #0]
 8004fc8:	2c00      	cmp	r4, #0
 8004fca:	d1f7      	bne.n	8004fbc <_fwalk_sglue+0xc>
 8004fcc:	4630      	mov	r0, r6
 8004fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fd2:	89ab      	ldrh	r3, [r5, #12]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d907      	bls.n	8004fe8 <_fwalk_sglue+0x38>
 8004fd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	d003      	beq.n	8004fe8 <_fwalk_sglue+0x38>
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	47c0      	blx	r8
 8004fe6:	4306      	orrs	r6, r0
 8004fe8:	3568      	adds	r5, #104	@ 0x68
 8004fea:	e7e9      	b.n	8004fc0 <_fwalk_sglue+0x10>

08004fec <_puts_r>:
 8004fec:	6a03      	ldr	r3, [r0, #32]
 8004fee:	b570      	push	{r4, r5, r6, lr}
 8004ff0:	6884      	ldr	r4, [r0, #8]
 8004ff2:	4605      	mov	r5, r0
 8004ff4:	460e      	mov	r6, r1
 8004ff6:	b90b      	cbnz	r3, 8004ffc <_puts_r+0x10>
 8004ff8:	f7ff ffc2 	bl	8004f80 <__sinit>
 8004ffc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ffe:	07db      	lsls	r3, r3, #31
 8005000:	d405      	bmi.n	800500e <_puts_r+0x22>
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	0598      	lsls	r0, r3, #22
 8005006:	d402      	bmi.n	800500e <_puts_r+0x22>
 8005008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800500a:	f000 f996 	bl	800533a <__retarget_lock_acquire_recursive>
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	0719      	lsls	r1, r3, #28
 8005012:	d502      	bpl.n	800501a <_puts_r+0x2e>
 8005014:	6923      	ldr	r3, [r4, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d135      	bne.n	8005086 <_puts_r+0x9a>
 800501a:	4621      	mov	r1, r4
 800501c:	4628      	mov	r0, r5
 800501e:	f000 f8c5 	bl	80051ac <__swsetup_r>
 8005022:	b380      	cbz	r0, 8005086 <_puts_r+0x9a>
 8005024:	f04f 35ff 	mov.w	r5, #4294967295
 8005028:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800502a:	07da      	lsls	r2, r3, #31
 800502c:	d405      	bmi.n	800503a <_puts_r+0x4e>
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	059b      	lsls	r3, r3, #22
 8005032:	d402      	bmi.n	800503a <_puts_r+0x4e>
 8005034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005036:	f000 f981 	bl	800533c <__retarget_lock_release_recursive>
 800503a:	4628      	mov	r0, r5
 800503c:	bd70      	pop	{r4, r5, r6, pc}
 800503e:	2b00      	cmp	r3, #0
 8005040:	da04      	bge.n	800504c <_puts_r+0x60>
 8005042:	69a2      	ldr	r2, [r4, #24]
 8005044:	429a      	cmp	r2, r3
 8005046:	dc17      	bgt.n	8005078 <_puts_r+0x8c>
 8005048:	290a      	cmp	r1, #10
 800504a:	d015      	beq.n	8005078 <_puts_r+0x8c>
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	6022      	str	r2, [r4, #0]
 8005052:	7019      	strb	r1, [r3, #0]
 8005054:	68a3      	ldr	r3, [r4, #8]
 8005056:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800505a:	3b01      	subs	r3, #1
 800505c:	60a3      	str	r3, [r4, #8]
 800505e:	2900      	cmp	r1, #0
 8005060:	d1ed      	bne.n	800503e <_puts_r+0x52>
 8005062:	2b00      	cmp	r3, #0
 8005064:	da11      	bge.n	800508a <_puts_r+0x9e>
 8005066:	4622      	mov	r2, r4
 8005068:	210a      	movs	r1, #10
 800506a:	4628      	mov	r0, r5
 800506c:	f000 f85f 	bl	800512e <__swbuf_r>
 8005070:	3001      	adds	r0, #1
 8005072:	d0d7      	beq.n	8005024 <_puts_r+0x38>
 8005074:	250a      	movs	r5, #10
 8005076:	e7d7      	b.n	8005028 <_puts_r+0x3c>
 8005078:	4622      	mov	r2, r4
 800507a:	4628      	mov	r0, r5
 800507c:	f000 f857 	bl	800512e <__swbuf_r>
 8005080:	3001      	adds	r0, #1
 8005082:	d1e7      	bne.n	8005054 <_puts_r+0x68>
 8005084:	e7ce      	b.n	8005024 <_puts_r+0x38>
 8005086:	3e01      	subs	r6, #1
 8005088:	e7e4      	b.n	8005054 <_puts_r+0x68>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	6022      	str	r2, [r4, #0]
 8005090:	220a      	movs	r2, #10
 8005092:	701a      	strb	r2, [r3, #0]
 8005094:	e7ee      	b.n	8005074 <_puts_r+0x88>
	...

08005098 <puts>:
 8005098:	4b02      	ldr	r3, [pc, #8]	@ (80050a4 <puts+0xc>)
 800509a:	4601      	mov	r1, r0
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	f7ff bfa5 	b.w	8004fec <_puts_r>
 80050a2:	bf00      	nop
 80050a4:	2000001c 	.word	0x2000001c

080050a8 <__sread>:
 80050a8:	b510      	push	{r4, lr}
 80050aa:	460c      	mov	r4, r1
 80050ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b0:	f000 f90c 	bl	80052cc <_read_r>
 80050b4:	2800      	cmp	r0, #0
 80050b6:	bfab      	itete	ge
 80050b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80050ba:	89a3      	ldrhlt	r3, [r4, #12]
 80050bc:	181b      	addge	r3, r3, r0
 80050be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80050c2:	bfac      	ite	ge
 80050c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80050c6:	81a3      	strhlt	r3, [r4, #12]
 80050c8:	bd10      	pop	{r4, pc}

080050ca <__swrite>:
 80050ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ce:	461f      	mov	r7, r3
 80050d0:	898b      	ldrh	r3, [r1, #12]
 80050d2:	05db      	lsls	r3, r3, #23
 80050d4:	4605      	mov	r5, r0
 80050d6:	460c      	mov	r4, r1
 80050d8:	4616      	mov	r6, r2
 80050da:	d505      	bpl.n	80050e8 <__swrite+0x1e>
 80050dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e0:	2302      	movs	r3, #2
 80050e2:	2200      	movs	r2, #0
 80050e4:	f000 f8e0 	bl	80052a8 <_lseek_r>
 80050e8:	89a3      	ldrh	r3, [r4, #12]
 80050ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050f2:	81a3      	strh	r3, [r4, #12]
 80050f4:	4632      	mov	r2, r6
 80050f6:	463b      	mov	r3, r7
 80050f8:	4628      	mov	r0, r5
 80050fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050fe:	f7ff bea1 	b.w	8004e44 <_write_r>

08005102 <__sseek>:
 8005102:	b510      	push	{r4, lr}
 8005104:	460c      	mov	r4, r1
 8005106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800510a:	f000 f8cd 	bl	80052a8 <_lseek_r>
 800510e:	1c43      	adds	r3, r0, #1
 8005110:	89a3      	ldrh	r3, [r4, #12]
 8005112:	bf15      	itete	ne
 8005114:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005116:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800511a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800511e:	81a3      	strheq	r3, [r4, #12]
 8005120:	bf18      	it	ne
 8005122:	81a3      	strhne	r3, [r4, #12]
 8005124:	bd10      	pop	{r4, pc}

08005126 <__sclose>:
 8005126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800512a:	f000 b8ad 	b.w	8005288 <_close_r>

0800512e <__swbuf_r>:
 800512e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005130:	460e      	mov	r6, r1
 8005132:	4614      	mov	r4, r2
 8005134:	4605      	mov	r5, r0
 8005136:	b118      	cbz	r0, 8005140 <__swbuf_r+0x12>
 8005138:	6a03      	ldr	r3, [r0, #32]
 800513a:	b90b      	cbnz	r3, 8005140 <__swbuf_r+0x12>
 800513c:	f7ff ff20 	bl	8004f80 <__sinit>
 8005140:	69a3      	ldr	r3, [r4, #24]
 8005142:	60a3      	str	r3, [r4, #8]
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	071a      	lsls	r2, r3, #28
 8005148:	d501      	bpl.n	800514e <__swbuf_r+0x20>
 800514a:	6923      	ldr	r3, [r4, #16]
 800514c:	b943      	cbnz	r3, 8005160 <__swbuf_r+0x32>
 800514e:	4621      	mov	r1, r4
 8005150:	4628      	mov	r0, r5
 8005152:	f000 f82b 	bl	80051ac <__swsetup_r>
 8005156:	b118      	cbz	r0, 8005160 <__swbuf_r+0x32>
 8005158:	f04f 37ff 	mov.w	r7, #4294967295
 800515c:	4638      	mov	r0, r7
 800515e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	6922      	ldr	r2, [r4, #16]
 8005164:	1a98      	subs	r0, r3, r2
 8005166:	6963      	ldr	r3, [r4, #20]
 8005168:	b2f6      	uxtb	r6, r6
 800516a:	4283      	cmp	r3, r0
 800516c:	4637      	mov	r7, r6
 800516e:	dc05      	bgt.n	800517c <__swbuf_r+0x4e>
 8005170:	4621      	mov	r1, r4
 8005172:	4628      	mov	r0, r5
 8005174:	f000 fa6e 	bl	8005654 <_fflush_r>
 8005178:	2800      	cmp	r0, #0
 800517a:	d1ed      	bne.n	8005158 <__swbuf_r+0x2a>
 800517c:	68a3      	ldr	r3, [r4, #8]
 800517e:	3b01      	subs	r3, #1
 8005180:	60a3      	str	r3, [r4, #8]
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	6022      	str	r2, [r4, #0]
 8005188:	701e      	strb	r6, [r3, #0]
 800518a:	6962      	ldr	r2, [r4, #20]
 800518c:	1c43      	adds	r3, r0, #1
 800518e:	429a      	cmp	r2, r3
 8005190:	d004      	beq.n	800519c <__swbuf_r+0x6e>
 8005192:	89a3      	ldrh	r3, [r4, #12]
 8005194:	07db      	lsls	r3, r3, #31
 8005196:	d5e1      	bpl.n	800515c <__swbuf_r+0x2e>
 8005198:	2e0a      	cmp	r6, #10
 800519a:	d1df      	bne.n	800515c <__swbuf_r+0x2e>
 800519c:	4621      	mov	r1, r4
 800519e:	4628      	mov	r0, r5
 80051a0:	f000 fa58 	bl	8005654 <_fflush_r>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	d0d9      	beq.n	800515c <__swbuf_r+0x2e>
 80051a8:	e7d6      	b.n	8005158 <__swbuf_r+0x2a>
	...

080051ac <__swsetup_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4b29      	ldr	r3, [pc, #164]	@ (8005254 <__swsetup_r+0xa8>)
 80051b0:	4605      	mov	r5, r0
 80051b2:	6818      	ldr	r0, [r3, #0]
 80051b4:	460c      	mov	r4, r1
 80051b6:	b118      	cbz	r0, 80051c0 <__swsetup_r+0x14>
 80051b8:	6a03      	ldr	r3, [r0, #32]
 80051ba:	b90b      	cbnz	r3, 80051c0 <__swsetup_r+0x14>
 80051bc:	f7ff fee0 	bl	8004f80 <__sinit>
 80051c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051c4:	0719      	lsls	r1, r3, #28
 80051c6:	d422      	bmi.n	800520e <__swsetup_r+0x62>
 80051c8:	06da      	lsls	r2, r3, #27
 80051ca:	d407      	bmi.n	80051dc <__swsetup_r+0x30>
 80051cc:	2209      	movs	r2, #9
 80051ce:	602a      	str	r2, [r5, #0]
 80051d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051d4:	81a3      	strh	r3, [r4, #12]
 80051d6:	f04f 30ff 	mov.w	r0, #4294967295
 80051da:	e033      	b.n	8005244 <__swsetup_r+0x98>
 80051dc:	0758      	lsls	r0, r3, #29
 80051de:	d512      	bpl.n	8005206 <__swsetup_r+0x5a>
 80051e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051e2:	b141      	cbz	r1, 80051f6 <__swsetup_r+0x4a>
 80051e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051e8:	4299      	cmp	r1, r3
 80051ea:	d002      	beq.n	80051f2 <__swsetup_r+0x46>
 80051ec:	4628      	mov	r0, r5
 80051ee:	f000 f8b5 	bl	800535c <_free_r>
 80051f2:	2300      	movs	r3, #0
 80051f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80051f6:	89a3      	ldrh	r3, [r4, #12]
 80051f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80051fc:	81a3      	strh	r3, [r4, #12]
 80051fe:	2300      	movs	r3, #0
 8005200:	6063      	str	r3, [r4, #4]
 8005202:	6923      	ldr	r3, [r4, #16]
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	89a3      	ldrh	r3, [r4, #12]
 8005208:	f043 0308 	orr.w	r3, r3, #8
 800520c:	81a3      	strh	r3, [r4, #12]
 800520e:	6923      	ldr	r3, [r4, #16]
 8005210:	b94b      	cbnz	r3, 8005226 <__swsetup_r+0x7a>
 8005212:	89a3      	ldrh	r3, [r4, #12]
 8005214:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800521c:	d003      	beq.n	8005226 <__swsetup_r+0x7a>
 800521e:	4621      	mov	r1, r4
 8005220:	4628      	mov	r0, r5
 8005222:	f000 fa65 	bl	80056f0 <__smakebuf_r>
 8005226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800522a:	f013 0201 	ands.w	r2, r3, #1
 800522e:	d00a      	beq.n	8005246 <__swsetup_r+0x9a>
 8005230:	2200      	movs	r2, #0
 8005232:	60a2      	str	r2, [r4, #8]
 8005234:	6962      	ldr	r2, [r4, #20]
 8005236:	4252      	negs	r2, r2
 8005238:	61a2      	str	r2, [r4, #24]
 800523a:	6922      	ldr	r2, [r4, #16]
 800523c:	b942      	cbnz	r2, 8005250 <__swsetup_r+0xa4>
 800523e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005242:	d1c5      	bne.n	80051d0 <__swsetup_r+0x24>
 8005244:	bd38      	pop	{r3, r4, r5, pc}
 8005246:	0799      	lsls	r1, r3, #30
 8005248:	bf58      	it	pl
 800524a:	6962      	ldrpl	r2, [r4, #20]
 800524c:	60a2      	str	r2, [r4, #8]
 800524e:	e7f4      	b.n	800523a <__swsetup_r+0x8e>
 8005250:	2000      	movs	r0, #0
 8005252:	e7f7      	b.n	8005244 <__swsetup_r+0x98>
 8005254:	2000001c 	.word	0x2000001c

08005258 <memcmp>:
 8005258:	b510      	push	{r4, lr}
 800525a:	3901      	subs	r1, #1
 800525c:	4402      	add	r2, r0
 800525e:	4290      	cmp	r0, r2
 8005260:	d101      	bne.n	8005266 <memcmp+0xe>
 8005262:	2000      	movs	r0, #0
 8005264:	e005      	b.n	8005272 <memcmp+0x1a>
 8005266:	7803      	ldrb	r3, [r0, #0]
 8005268:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800526c:	42a3      	cmp	r3, r4
 800526e:	d001      	beq.n	8005274 <memcmp+0x1c>
 8005270:	1b18      	subs	r0, r3, r4
 8005272:	bd10      	pop	{r4, pc}
 8005274:	3001      	adds	r0, #1
 8005276:	e7f2      	b.n	800525e <memcmp+0x6>

08005278 <memset>:
 8005278:	4402      	add	r2, r0
 800527a:	4603      	mov	r3, r0
 800527c:	4293      	cmp	r3, r2
 800527e:	d100      	bne.n	8005282 <memset+0xa>
 8005280:	4770      	bx	lr
 8005282:	f803 1b01 	strb.w	r1, [r3], #1
 8005286:	e7f9      	b.n	800527c <memset+0x4>

08005288 <_close_r>:
 8005288:	b538      	push	{r3, r4, r5, lr}
 800528a:	4d06      	ldr	r5, [pc, #24]	@ (80052a4 <_close_r+0x1c>)
 800528c:	2300      	movs	r3, #0
 800528e:	4604      	mov	r4, r0
 8005290:	4608      	mov	r0, r1
 8005292:	602b      	str	r3, [r5, #0]
 8005294:	f7fb fcad 	bl	8000bf2 <_close>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d102      	bne.n	80052a2 <_close_r+0x1a>
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	b103      	cbz	r3, 80052a2 <_close_r+0x1a>
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	200145b4 	.word	0x200145b4

080052a8 <_lseek_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4d07      	ldr	r5, [pc, #28]	@ (80052c8 <_lseek_r+0x20>)
 80052ac:	4604      	mov	r4, r0
 80052ae:	4608      	mov	r0, r1
 80052b0:	4611      	mov	r1, r2
 80052b2:	2200      	movs	r2, #0
 80052b4:	602a      	str	r2, [r5, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f7fb fcc2 	bl	8000c40 <_lseek>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d102      	bne.n	80052c6 <_lseek_r+0x1e>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	b103      	cbz	r3, 80052c6 <_lseek_r+0x1e>
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	200145b4 	.word	0x200145b4

080052cc <_read_r>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	4d07      	ldr	r5, [pc, #28]	@ (80052ec <_read_r+0x20>)
 80052d0:	4604      	mov	r4, r0
 80052d2:	4608      	mov	r0, r1
 80052d4:	4611      	mov	r1, r2
 80052d6:	2200      	movs	r2, #0
 80052d8:	602a      	str	r2, [r5, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	f7fb fc6c 	bl	8000bb8 <_read>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	d102      	bne.n	80052ea <_read_r+0x1e>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	b103      	cbz	r3, 80052ea <_read_r+0x1e>
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	200145b4 	.word	0x200145b4

080052f0 <__libc_init_array>:
 80052f0:	b570      	push	{r4, r5, r6, lr}
 80052f2:	4d0d      	ldr	r5, [pc, #52]	@ (8005328 <__libc_init_array+0x38>)
 80052f4:	4c0d      	ldr	r4, [pc, #52]	@ (800532c <__libc_init_array+0x3c>)
 80052f6:	1b64      	subs	r4, r4, r5
 80052f8:	10a4      	asrs	r4, r4, #2
 80052fa:	2600      	movs	r6, #0
 80052fc:	42a6      	cmp	r6, r4
 80052fe:	d109      	bne.n	8005314 <__libc_init_array+0x24>
 8005300:	4d0b      	ldr	r5, [pc, #44]	@ (8005330 <__libc_init_array+0x40>)
 8005302:	4c0c      	ldr	r4, [pc, #48]	@ (8005334 <__libc_init_array+0x44>)
 8005304:	f000 fa70 	bl	80057e8 <_init>
 8005308:	1b64      	subs	r4, r4, r5
 800530a:	10a4      	asrs	r4, r4, #2
 800530c:	2600      	movs	r6, #0
 800530e:	42a6      	cmp	r6, r4
 8005310:	d105      	bne.n	800531e <__libc_init_array+0x2e>
 8005312:	bd70      	pop	{r4, r5, r6, pc}
 8005314:	f855 3b04 	ldr.w	r3, [r5], #4
 8005318:	4798      	blx	r3
 800531a:	3601      	adds	r6, #1
 800531c:	e7ee      	b.n	80052fc <__libc_init_array+0xc>
 800531e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005322:	4798      	blx	r3
 8005324:	3601      	adds	r6, #1
 8005326:	e7f2      	b.n	800530e <__libc_init_array+0x1e>
 8005328:	08005940 	.word	0x08005940
 800532c:	08005940 	.word	0x08005940
 8005330:	08005940 	.word	0x08005940
 8005334:	08005944 	.word	0x08005944

08005338 <__retarget_lock_init_recursive>:
 8005338:	4770      	bx	lr

0800533a <__retarget_lock_acquire_recursive>:
 800533a:	4770      	bx	lr

0800533c <__retarget_lock_release_recursive>:
 800533c:	4770      	bx	lr

0800533e <memcpy>:
 800533e:	440a      	add	r2, r1
 8005340:	4291      	cmp	r1, r2
 8005342:	f100 33ff 	add.w	r3, r0, #4294967295
 8005346:	d100      	bne.n	800534a <memcpy+0xc>
 8005348:	4770      	bx	lr
 800534a:	b510      	push	{r4, lr}
 800534c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005350:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005354:	4291      	cmp	r1, r2
 8005356:	d1f9      	bne.n	800534c <memcpy+0xe>
 8005358:	bd10      	pop	{r4, pc}
	...

0800535c <_free_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4605      	mov	r5, r0
 8005360:	2900      	cmp	r1, #0
 8005362:	d041      	beq.n	80053e8 <_free_r+0x8c>
 8005364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005368:	1f0c      	subs	r4, r1, #4
 800536a:	2b00      	cmp	r3, #0
 800536c:	bfb8      	it	lt
 800536e:	18e4      	addlt	r4, r4, r3
 8005370:	f000 f8e0 	bl	8005534 <__malloc_lock>
 8005374:	4a1d      	ldr	r2, [pc, #116]	@ (80053ec <_free_r+0x90>)
 8005376:	6813      	ldr	r3, [r2, #0]
 8005378:	b933      	cbnz	r3, 8005388 <_free_r+0x2c>
 800537a:	6063      	str	r3, [r4, #4]
 800537c:	6014      	str	r4, [r2, #0]
 800537e:	4628      	mov	r0, r5
 8005380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005384:	f000 b8dc 	b.w	8005540 <__malloc_unlock>
 8005388:	42a3      	cmp	r3, r4
 800538a:	d908      	bls.n	800539e <_free_r+0x42>
 800538c:	6820      	ldr	r0, [r4, #0]
 800538e:	1821      	adds	r1, r4, r0
 8005390:	428b      	cmp	r3, r1
 8005392:	bf01      	itttt	eq
 8005394:	6819      	ldreq	r1, [r3, #0]
 8005396:	685b      	ldreq	r3, [r3, #4]
 8005398:	1809      	addeq	r1, r1, r0
 800539a:	6021      	streq	r1, [r4, #0]
 800539c:	e7ed      	b.n	800537a <_free_r+0x1e>
 800539e:	461a      	mov	r2, r3
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	b10b      	cbz	r3, 80053a8 <_free_r+0x4c>
 80053a4:	42a3      	cmp	r3, r4
 80053a6:	d9fa      	bls.n	800539e <_free_r+0x42>
 80053a8:	6811      	ldr	r1, [r2, #0]
 80053aa:	1850      	adds	r0, r2, r1
 80053ac:	42a0      	cmp	r0, r4
 80053ae:	d10b      	bne.n	80053c8 <_free_r+0x6c>
 80053b0:	6820      	ldr	r0, [r4, #0]
 80053b2:	4401      	add	r1, r0
 80053b4:	1850      	adds	r0, r2, r1
 80053b6:	4283      	cmp	r3, r0
 80053b8:	6011      	str	r1, [r2, #0]
 80053ba:	d1e0      	bne.n	800537e <_free_r+0x22>
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	6053      	str	r3, [r2, #4]
 80053c2:	4408      	add	r0, r1
 80053c4:	6010      	str	r0, [r2, #0]
 80053c6:	e7da      	b.n	800537e <_free_r+0x22>
 80053c8:	d902      	bls.n	80053d0 <_free_r+0x74>
 80053ca:	230c      	movs	r3, #12
 80053cc:	602b      	str	r3, [r5, #0]
 80053ce:	e7d6      	b.n	800537e <_free_r+0x22>
 80053d0:	6820      	ldr	r0, [r4, #0]
 80053d2:	1821      	adds	r1, r4, r0
 80053d4:	428b      	cmp	r3, r1
 80053d6:	bf04      	itt	eq
 80053d8:	6819      	ldreq	r1, [r3, #0]
 80053da:	685b      	ldreq	r3, [r3, #4]
 80053dc:	6063      	str	r3, [r4, #4]
 80053de:	bf04      	itt	eq
 80053e0:	1809      	addeq	r1, r1, r0
 80053e2:	6021      	streq	r1, [r4, #0]
 80053e4:	6054      	str	r4, [r2, #4]
 80053e6:	e7ca      	b.n	800537e <_free_r+0x22>
 80053e8:	bd38      	pop	{r3, r4, r5, pc}
 80053ea:	bf00      	nop
 80053ec:	200145c0 	.word	0x200145c0

080053f0 <sbrk_aligned>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	4e0f      	ldr	r6, [pc, #60]	@ (8005430 <sbrk_aligned+0x40>)
 80053f4:	460c      	mov	r4, r1
 80053f6:	6831      	ldr	r1, [r6, #0]
 80053f8:	4605      	mov	r5, r0
 80053fa:	b911      	cbnz	r1, 8005402 <sbrk_aligned+0x12>
 80053fc:	f000 f9d6 	bl	80057ac <_sbrk_r>
 8005400:	6030      	str	r0, [r6, #0]
 8005402:	4621      	mov	r1, r4
 8005404:	4628      	mov	r0, r5
 8005406:	f000 f9d1 	bl	80057ac <_sbrk_r>
 800540a:	1c43      	adds	r3, r0, #1
 800540c:	d103      	bne.n	8005416 <sbrk_aligned+0x26>
 800540e:	f04f 34ff 	mov.w	r4, #4294967295
 8005412:	4620      	mov	r0, r4
 8005414:	bd70      	pop	{r4, r5, r6, pc}
 8005416:	1cc4      	adds	r4, r0, #3
 8005418:	f024 0403 	bic.w	r4, r4, #3
 800541c:	42a0      	cmp	r0, r4
 800541e:	d0f8      	beq.n	8005412 <sbrk_aligned+0x22>
 8005420:	1a21      	subs	r1, r4, r0
 8005422:	4628      	mov	r0, r5
 8005424:	f000 f9c2 	bl	80057ac <_sbrk_r>
 8005428:	3001      	adds	r0, #1
 800542a:	d1f2      	bne.n	8005412 <sbrk_aligned+0x22>
 800542c:	e7ef      	b.n	800540e <sbrk_aligned+0x1e>
 800542e:	bf00      	nop
 8005430:	200145bc 	.word	0x200145bc

08005434 <_malloc_r>:
 8005434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005438:	1ccd      	adds	r5, r1, #3
 800543a:	f025 0503 	bic.w	r5, r5, #3
 800543e:	3508      	adds	r5, #8
 8005440:	2d0c      	cmp	r5, #12
 8005442:	bf38      	it	cc
 8005444:	250c      	movcc	r5, #12
 8005446:	2d00      	cmp	r5, #0
 8005448:	4606      	mov	r6, r0
 800544a:	db01      	blt.n	8005450 <_malloc_r+0x1c>
 800544c:	42a9      	cmp	r1, r5
 800544e:	d904      	bls.n	800545a <_malloc_r+0x26>
 8005450:	230c      	movs	r3, #12
 8005452:	6033      	str	r3, [r6, #0]
 8005454:	2000      	movs	r0, #0
 8005456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800545a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005530 <_malloc_r+0xfc>
 800545e:	f000 f869 	bl	8005534 <__malloc_lock>
 8005462:	f8d8 3000 	ldr.w	r3, [r8]
 8005466:	461c      	mov	r4, r3
 8005468:	bb44      	cbnz	r4, 80054bc <_malloc_r+0x88>
 800546a:	4629      	mov	r1, r5
 800546c:	4630      	mov	r0, r6
 800546e:	f7ff ffbf 	bl	80053f0 <sbrk_aligned>
 8005472:	1c43      	adds	r3, r0, #1
 8005474:	4604      	mov	r4, r0
 8005476:	d158      	bne.n	800552a <_malloc_r+0xf6>
 8005478:	f8d8 4000 	ldr.w	r4, [r8]
 800547c:	4627      	mov	r7, r4
 800547e:	2f00      	cmp	r7, #0
 8005480:	d143      	bne.n	800550a <_malloc_r+0xd6>
 8005482:	2c00      	cmp	r4, #0
 8005484:	d04b      	beq.n	800551e <_malloc_r+0xea>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	4639      	mov	r1, r7
 800548a:	4630      	mov	r0, r6
 800548c:	eb04 0903 	add.w	r9, r4, r3
 8005490:	f000 f98c 	bl	80057ac <_sbrk_r>
 8005494:	4581      	cmp	r9, r0
 8005496:	d142      	bne.n	800551e <_malloc_r+0xea>
 8005498:	6821      	ldr	r1, [r4, #0]
 800549a:	1a6d      	subs	r5, r5, r1
 800549c:	4629      	mov	r1, r5
 800549e:	4630      	mov	r0, r6
 80054a0:	f7ff ffa6 	bl	80053f0 <sbrk_aligned>
 80054a4:	3001      	adds	r0, #1
 80054a6:	d03a      	beq.n	800551e <_malloc_r+0xea>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	442b      	add	r3, r5
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	f8d8 3000 	ldr.w	r3, [r8]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	bb62      	cbnz	r2, 8005510 <_malloc_r+0xdc>
 80054b6:	f8c8 7000 	str.w	r7, [r8]
 80054ba:	e00f      	b.n	80054dc <_malloc_r+0xa8>
 80054bc:	6822      	ldr	r2, [r4, #0]
 80054be:	1b52      	subs	r2, r2, r5
 80054c0:	d420      	bmi.n	8005504 <_malloc_r+0xd0>
 80054c2:	2a0b      	cmp	r2, #11
 80054c4:	d917      	bls.n	80054f6 <_malloc_r+0xc2>
 80054c6:	1961      	adds	r1, r4, r5
 80054c8:	42a3      	cmp	r3, r4
 80054ca:	6025      	str	r5, [r4, #0]
 80054cc:	bf18      	it	ne
 80054ce:	6059      	strne	r1, [r3, #4]
 80054d0:	6863      	ldr	r3, [r4, #4]
 80054d2:	bf08      	it	eq
 80054d4:	f8c8 1000 	streq.w	r1, [r8]
 80054d8:	5162      	str	r2, [r4, r5]
 80054da:	604b      	str	r3, [r1, #4]
 80054dc:	4630      	mov	r0, r6
 80054de:	f000 f82f 	bl	8005540 <__malloc_unlock>
 80054e2:	f104 000b 	add.w	r0, r4, #11
 80054e6:	1d23      	adds	r3, r4, #4
 80054e8:	f020 0007 	bic.w	r0, r0, #7
 80054ec:	1ac2      	subs	r2, r0, r3
 80054ee:	bf1c      	itt	ne
 80054f0:	1a1b      	subne	r3, r3, r0
 80054f2:	50a3      	strne	r3, [r4, r2]
 80054f4:	e7af      	b.n	8005456 <_malloc_r+0x22>
 80054f6:	6862      	ldr	r2, [r4, #4]
 80054f8:	42a3      	cmp	r3, r4
 80054fa:	bf0c      	ite	eq
 80054fc:	f8c8 2000 	streq.w	r2, [r8]
 8005500:	605a      	strne	r2, [r3, #4]
 8005502:	e7eb      	b.n	80054dc <_malloc_r+0xa8>
 8005504:	4623      	mov	r3, r4
 8005506:	6864      	ldr	r4, [r4, #4]
 8005508:	e7ae      	b.n	8005468 <_malloc_r+0x34>
 800550a:	463c      	mov	r4, r7
 800550c:	687f      	ldr	r7, [r7, #4]
 800550e:	e7b6      	b.n	800547e <_malloc_r+0x4a>
 8005510:	461a      	mov	r2, r3
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	42a3      	cmp	r3, r4
 8005516:	d1fb      	bne.n	8005510 <_malloc_r+0xdc>
 8005518:	2300      	movs	r3, #0
 800551a:	6053      	str	r3, [r2, #4]
 800551c:	e7de      	b.n	80054dc <_malloc_r+0xa8>
 800551e:	230c      	movs	r3, #12
 8005520:	6033      	str	r3, [r6, #0]
 8005522:	4630      	mov	r0, r6
 8005524:	f000 f80c 	bl	8005540 <__malloc_unlock>
 8005528:	e794      	b.n	8005454 <_malloc_r+0x20>
 800552a:	6005      	str	r5, [r0, #0]
 800552c:	e7d6      	b.n	80054dc <_malloc_r+0xa8>
 800552e:	bf00      	nop
 8005530:	200145c0 	.word	0x200145c0

08005534 <__malloc_lock>:
 8005534:	4801      	ldr	r0, [pc, #4]	@ (800553c <__malloc_lock+0x8>)
 8005536:	f7ff bf00 	b.w	800533a <__retarget_lock_acquire_recursive>
 800553a:	bf00      	nop
 800553c:	200145b8 	.word	0x200145b8

08005540 <__malloc_unlock>:
 8005540:	4801      	ldr	r0, [pc, #4]	@ (8005548 <__malloc_unlock+0x8>)
 8005542:	f7ff befb 	b.w	800533c <__retarget_lock_release_recursive>
 8005546:	bf00      	nop
 8005548:	200145b8 	.word	0x200145b8

0800554c <__sflush_r>:
 800554c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005554:	0716      	lsls	r6, r2, #28
 8005556:	4605      	mov	r5, r0
 8005558:	460c      	mov	r4, r1
 800555a:	d454      	bmi.n	8005606 <__sflush_r+0xba>
 800555c:	684b      	ldr	r3, [r1, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	dc02      	bgt.n	8005568 <__sflush_r+0x1c>
 8005562:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005564:	2b00      	cmp	r3, #0
 8005566:	dd48      	ble.n	80055fa <__sflush_r+0xae>
 8005568:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800556a:	2e00      	cmp	r6, #0
 800556c:	d045      	beq.n	80055fa <__sflush_r+0xae>
 800556e:	2300      	movs	r3, #0
 8005570:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005574:	682f      	ldr	r7, [r5, #0]
 8005576:	6a21      	ldr	r1, [r4, #32]
 8005578:	602b      	str	r3, [r5, #0]
 800557a:	d030      	beq.n	80055de <__sflush_r+0x92>
 800557c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	0759      	lsls	r1, r3, #29
 8005582:	d505      	bpl.n	8005590 <__sflush_r+0x44>
 8005584:	6863      	ldr	r3, [r4, #4]
 8005586:	1ad2      	subs	r2, r2, r3
 8005588:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800558a:	b10b      	cbz	r3, 8005590 <__sflush_r+0x44>
 800558c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800558e:	1ad2      	subs	r2, r2, r3
 8005590:	2300      	movs	r3, #0
 8005592:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005594:	6a21      	ldr	r1, [r4, #32]
 8005596:	4628      	mov	r0, r5
 8005598:	47b0      	blx	r6
 800559a:	1c43      	adds	r3, r0, #1
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	d106      	bne.n	80055ae <__sflush_r+0x62>
 80055a0:	6829      	ldr	r1, [r5, #0]
 80055a2:	291d      	cmp	r1, #29
 80055a4:	d82b      	bhi.n	80055fe <__sflush_r+0xb2>
 80055a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005650 <__sflush_r+0x104>)
 80055a8:	40ca      	lsrs	r2, r1
 80055aa:	07d6      	lsls	r6, r2, #31
 80055ac:	d527      	bpl.n	80055fe <__sflush_r+0xb2>
 80055ae:	2200      	movs	r2, #0
 80055b0:	6062      	str	r2, [r4, #4]
 80055b2:	04d9      	lsls	r1, r3, #19
 80055b4:	6922      	ldr	r2, [r4, #16]
 80055b6:	6022      	str	r2, [r4, #0]
 80055b8:	d504      	bpl.n	80055c4 <__sflush_r+0x78>
 80055ba:	1c42      	adds	r2, r0, #1
 80055bc:	d101      	bne.n	80055c2 <__sflush_r+0x76>
 80055be:	682b      	ldr	r3, [r5, #0]
 80055c0:	b903      	cbnz	r3, 80055c4 <__sflush_r+0x78>
 80055c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80055c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055c6:	602f      	str	r7, [r5, #0]
 80055c8:	b1b9      	cbz	r1, 80055fa <__sflush_r+0xae>
 80055ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055ce:	4299      	cmp	r1, r3
 80055d0:	d002      	beq.n	80055d8 <__sflush_r+0x8c>
 80055d2:	4628      	mov	r0, r5
 80055d4:	f7ff fec2 	bl	800535c <_free_r>
 80055d8:	2300      	movs	r3, #0
 80055da:	6363      	str	r3, [r4, #52]	@ 0x34
 80055dc:	e00d      	b.n	80055fa <__sflush_r+0xae>
 80055de:	2301      	movs	r3, #1
 80055e0:	4628      	mov	r0, r5
 80055e2:	47b0      	blx	r6
 80055e4:	4602      	mov	r2, r0
 80055e6:	1c50      	adds	r0, r2, #1
 80055e8:	d1c9      	bne.n	800557e <__sflush_r+0x32>
 80055ea:	682b      	ldr	r3, [r5, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0c6      	beq.n	800557e <__sflush_r+0x32>
 80055f0:	2b1d      	cmp	r3, #29
 80055f2:	d001      	beq.n	80055f8 <__sflush_r+0xac>
 80055f4:	2b16      	cmp	r3, #22
 80055f6:	d11e      	bne.n	8005636 <__sflush_r+0xea>
 80055f8:	602f      	str	r7, [r5, #0]
 80055fa:	2000      	movs	r0, #0
 80055fc:	e022      	b.n	8005644 <__sflush_r+0xf8>
 80055fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005602:	b21b      	sxth	r3, r3
 8005604:	e01b      	b.n	800563e <__sflush_r+0xf2>
 8005606:	690f      	ldr	r7, [r1, #16]
 8005608:	2f00      	cmp	r7, #0
 800560a:	d0f6      	beq.n	80055fa <__sflush_r+0xae>
 800560c:	0793      	lsls	r3, r2, #30
 800560e:	680e      	ldr	r6, [r1, #0]
 8005610:	bf08      	it	eq
 8005612:	694b      	ldreq	r3, [r1, #20]
 8005614:	600f      	str	r7, [r1, #0]
 8005616:	bf18      	it	ne
 8005618:	2300      	movne	r3, #0
 800561a:	eba6 0807 	sub.w	r8, r6, r7
 800561e:	608b      	str	r3, [r1, #8]
 8005620:	f1b8 0f00 	cmp.w	r8, #0
 8005624:	dde9      	ble.n	80055fa <__sflush_r+0xae>
 8005626:	6a21      	ldr	r1, [r4, #32]
 8005628:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800562a:	4643      	mov	r3, r8
 800562c:	463a      	mov	r2, r7
 800562e:	4628      	mov	r0, r5
 8005630:	47b0      	blx	r6
 8005632:	2800      	cmp	r0, #0
 8005634:	dc08      	bgt.n	8005648 <__sflush_r+0xfc>
 8005636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800563a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800563e:	81a3      	strh	r3, [r4, #12]
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005648:	4407      	add	r7, r0
 800564a:	eba8 0800 	sub.w	r8, r8, r0
 800564e:	e7e7      	b.n	8005620 <__sflush_r+0xd4>
 8005650:	20400001 	.word	0x20400001

08005654 <_fflush_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	690b      	ldr	r3, [r1, #16]
 8005658:	4605      	mov	r5, r0
 800565a:	460c      	mov	r4, r1
 800565c:	b913      	cbnz	r3, 8005664 <_fflush_r+0x10>
 800565e:	2500      	movs	r5, #0
 8005660:	4628      	mov	r0, r5
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	b118      	cbz	r0, 800566e <_fflush_r+0x1a>
 8005666:	6a03      	ldr	r3, [r0, #32]
 8005668:	b90b      	cbnz	r3, 800566e <_fflush_r+0x1a>
 800566a:	f7ff fc89 	bl	8004f80 <__sinit>
 800566e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0f3      	beq.n	800565e <_fflush_r+0xa>
 8005676:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005678:	07d0      	lsls	r0, r2, #31
 800567a:	d404      	bmi.n	8005686 <_fflush_r+0x32>
 800567c:	0599      	lsls	r1, r3, #22
 800567e:	d402      	bmi.n	8005686 <_fflush_r+0x32>
 8005680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005682:	f7ff fe5a 	bl	800533a <__retarget_lock_acquire_recursive>
 8005686:	4628      	mov	r0, r5
 8005688:	4621      	mov	r1, r4
 800568a:	f7ff ff5f 	bl	800554c <__sflush_r>
 800568e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005690:	07da      	lsls	r2, r3, #31
 8005692:	4605      	mov	r5, r0
 8005694:	d4e4      	bmi.n	8005660 <_fflush_r+0xc>
 8005696:	89a3      	ldrh	r3, [r4, #12]
 8005698:	059b      	lsls	r3, r3, #22
 800569a:	d4e1      	bmi.n	8005660 <_fflush_r+0xc>
 800569c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800569e:	f7ff fe4d 	bl	800533c <__retarget_lock_release_recursive>
 80056a2:	e7dd      	b.n	8005660 <_fflush_r+0xc>

080056a4 <__swhatbuf_r>:
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	460c      	mov	r4, r1
 80056a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ac:	2900      	cmp	r1, #0
 80056ae:	b096      	sub	sp, #88	@ 0x58
 80056b0:	4615      	mov	r5, r2
 80056b2:	461e      	mov	r6, r3
 80056b4:	da0d      	bge.n	80056d2 <__swhatbuf_r+0x2e>
 80056b6:	89a3      	ldrh	r3, [r4, #12]
 80056b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80056bc:	f04f 0100 	mov.w	r1, #0
 80056c0:	bf14      	ite	ne
 80056c2:	2340      	movne	r3, #64	@ 0x40
 80056c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80056c8:	2000      	movs	r0, #0
 80056ca:	6031      	str	r1, [r6, #0]
 80056cc:	602b      	str	r3, [r5, #0]
 80056ce:	b016      	add	sp, #88	@ 0x58
 80056d0:	bd70      	pop	{r4, r5, r6, pc}
 80056d2:	466a      	mov	r2, sp
 80056d4:	f000 f848 	bl	8005768 <_fstat_r>
 80056d8:	2800      	cmp	r0, #0
 80056da:	dbec      	blt.n	80056b6 <__swhatbuf_r+0x12>
 80056dc:	9901      	ldr	r1, [sp, #4]
 80056de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80056e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80056e6:	4259      	negs	r1, r3
 80056e8:	4159      	adcs	r1, r3
 80056ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056ee:	e7eb      	b.n	80056c8 <__swhatbuf_r+0x24>

080056f0 <__smakebuf_r>:
 80056f0:	898b      	ldrh	r3, [r1, #12]
 80056f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056f4:	079d      	lsls	r5, r3, #30
 80056f6:	4606      	mov	r6, r0
 80056f8:	460c      	mov	r4, r1
 80056fa:	d507      	bpl.n	800570c <__smakebuf_r+0x1c>
 80056fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	6123      	str	r3, [r4, #16]
 8005704:	2301      	movs	r3, #1
 8005706:	6163      	str	r3, [r4, #20]
 8005708:	b003      	add	sp, #12
 800570a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800570c:	ab01      	add	r3, sp, #4
 800570e:	466a      	mov	r2, sp
 8005710:	f7ff ffc8 	bl	80056a4 <__swhatbuf_r>
 8005714:	9f00      	ldr	r7, [sp, #0]
 8005716:	4605      	mov	r5, r0
 8005718:	4639      	mov	r1, r7
 800571a:	4630      	mov	r0, r6
 800571c:	f7ff fe8a 	bl	8005434 <_malloc_r>
 8005720:	b948      	cbnz	r0, 8005736 <__smakebuf_r+0x46>
 8005722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005726:	059a      	lsls	r2, r3, #22
 8005728:	d4ee      	bmi.n	8005708 <__smakebuf_r+0x18>
 800572a:	f023 0303 	bic.w	r3, r3, #3
 800572e:	f043 0302 	orr.w	r3, r3, #2
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	e7e2      	b.n	80056fc <__smakebuf_r+0xc>
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	6020      	str	r0, [r4, #0]
 800573a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800573e:	81a3      	strh	r3, [r4, #12]
 8005740:	9b01      	ldr	r3, [sp, #4]
 8005742:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005746:	b15b      	cbz	r3, 8005760 <__smakebuf_r+0x70>
 8005748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800574c:	4630      	mov	r0, r6
 800574e:	f000 f81d 	bl	800578c <_isatty_r>
 8005752:	b128      	cbz	r0, 8005760 <__smakebuf_r+0x70>
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	f023 0303 	bic.w	r3, r3, #3
 800575a:	f043 0301 	orr.w	r3, r3, #1
 800575e:	81a3      	strh	r3, [r4, #12]
 8005760:	89a3      	ldrh	r3, [r4, #12]
 8005762:	431d      	orrs	r5, r3
 8005764:	81a5      	strh	r5, [r4, #12]
 8005766:	e7cf      	b.n	8005708 <__smakebuf_r+0x18>

08005768 <_fstat_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4d07      	ldr	r5, [pc, #28]	@ (8005788 <_fstat_r+0x20>)
 800576c:	2300      	movs	r3, #0
 800576e:	4604      	mov	r4, r0
 8005770:	4608      	mov	r0, r1
 8005772:	4611      	mov	r1, r2
 8005774:	602b      	str	r3, [r5, #0]
 8005776:	f7fb fa48 	bl	8000c0a <_fstat>
 800577a:	1c43      	adds	r3, r0, #1
 800577c:	d102      	bne.n	8005784 <_fstat_r+0x1c>
 800577e:	682b      	ldr	r3, [r5, #0]
 8005780:	b103      	cbz	r3, 8005784 <_fstat_r+0x1c>
 8005782:	6023      	str	r3, [r4, #0]
 8005784:	bd38      	pop	{r3, r4, r5, pc}
 8005786:	bf00      	nop
 8005788:	200145b4 	.word	0x200145b4

0800578c <_isatty_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4d06      	ldr	r5, [pc, #24]	@ (80057a8 <_isatty_r+0x1c>)
 8005790:	2300      	movs	r3, #0
 8005792:	4604      	mov	r4, r0
 8005794:	4608      	mov	r0, r1
 8005796:	602b      	str	r3, [r5, #0]
 8005798:	f7fb fa47 	bl	8000c2a <_isatty>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d102      	bne.n	80057a6 <_isatty_r+0x1a>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	b103      	cbz	r3, 80057a6 <_isatty_r+0x1a>
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	200145b4 	.word	0x200145b4

080057ac <_sbrk_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	4d06      	ldr	r5, [pc, #24]	@ (80057c8 <_sbrk_r+0x1c>)
 80057b0:	2300      	movs	r3, #0
 80057b2:	4604      	mov	r4, r0
 80057b4:	4608      	mov	r0, r1
 80057b6:	602b      	str	r3, [r5, #0]
 80057b8:	f000 f808 	bl	80057cc <_sbrk>
 80057bc:	1c43      	adds	r3, r0, #1
 80057be:	d102      	bne.n	80057c6 <_sbrk_r+0x1a>
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	b103      	cbz	r3, 80057c6 <_sbrk_r+0x1a>
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	bd38      	pop	{r3, r4, r5, pc}
 80057c8:	200145b4 	.word	0x200145b4

080057cc <_sbrk>:
 80057cc:	4a04      	ldr	r2, [pc, #16]	@ (80057e0 <_sbrk+0x14>)
 80057ce:	6811      	ldr	r1, [r2, #0]
 80057d0:	4603      	mov	r3, r0
 80057d2:	b909      	cbnz	r1, 80057d8 <_sbrk+0xc>
 80057d4:	4903      	ldr	r1, [pc, #12]	@ (80057e4 <_sbrk+0x18>)
 80057d6:	6011      	str	r1, [r2, #0]
 80057d8:	6810      	ldr	r0, [r2, #0]
 80057da:	4403      	add	r3, r0
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	4770      	bx	lr
 80057e0:	200145c4 	.word	0x200145c4
 80057e4:	200145c8 	.word	0x200145c8

080057e8 <_init>:
 80057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ea:	bf00      	nop
 80057ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ee:	bc08      	pop	{r3}
 80057f0:	469e      	mov	lr, r3
 80057f2:	4770      	bx	lr

080057f4 <_fini>:
 80057f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f6:	bf00      	nop
 80057f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057fa:	bc08      	pop	{r3}
 80057fc:	469e      	mov	lr, r3
 80057fe:	4770      	bx	lr
